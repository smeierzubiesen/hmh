; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\mitoskalandiel\Documents\Visual Studio 2015\Projects\hmh\win32_handmade\win32_handmade.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
?Operation@?9??MainWindowCallback@@YGJPAUHWND__@@IIJ@Z@4KA DD 0ff0062H ; `MainWindowCallback'::`10'::Operation
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	?MainWindowCallback@@YGJPAUHWND__@@IIJ@Z	; MainWindowCallback
PUBLIC	??_C@_08JPDHIBIK@WM_SIZE?6?$AA@			; `string'
PUBLIC	??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@		; `string'
PUBLIC	??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@		; `string'
PUBLIC	??_C@_08CIKHGLDE@WM_QUIT?6?$AA@			; `string'
PUBLIC	??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@	; `string'
PUBLIC	??_C@_09LMMFEECM@WM_PAINT?6?$AA@		; `string'
PUBLIC	??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@		; `string'
PUBLIC	??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@	; `string'
PUBLIC	??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@ ; `string'
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__PatBlt@24:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@
CONST	SEGMENT
??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@ DB 'This is Handmade Her'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
CONST	SEGMENT
??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@ DB 'Handmade Hero v0.1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@
CONST	SEGMENT
??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@ DB 'hmhWindowClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMMFEECM@WM_PAINT?6?$AA@
CONST	SEGMENT
??_C@_09LMMFEECM@WM_PAINT?6?$AA@ DB 'WM_PAINT', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@
CONST	SEGMENT
??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@ DB 'WM_ACTIVATEAPP', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIKHGLDE@WM_QUIT?6?$AA@
CONST	SEGMENT
??_C@_08CIKHGLDE@WM_QUIT?6?$AA@ DB 'WM_QUIT', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@
CONST	SEGMENT
??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@ DB 'WM_CLOSE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@
CONST	SEGMENT
??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@ DB 'WM_DESTROY', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPDHIBIK@WM_SIZE?6?$AA@
CONST	SEGMENT
??_C@_08JPDHIBIK@WM_SIZE?6?$AA@ DB 'WM_SIZE', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mitoskalandiel\documents\visual studio 2015\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?MainWindowCallback@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv64 = -344						; size = 4
_Height$1 = -144					; size = 4
_Width$2 = -132						; size = 4
_Y$3 = -120						; size = 4
_X$4 = -108						; size = 4
_DeviceContext$5 = -96					; size = 4
_Paint$6 = -84						; size = 64
_Result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_Window$ = 8						; size = 4
_Message$ = 12						; size = 4
_WParam$ = 16						; size = 4
_LParam$ = 20						; size = 4
?MainWindowCallback@@YGJPAUHWND__@@IIJ@Z PROC		; MainWindowCallback, COMDAT

; 16   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 58 01 00
	00		 sub	 esp, 344		; 00000158H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd a8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-344]
  00012	b9 56 00 00 00	 mov	 ecx, 86			; 00000056H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 17   : 	LRESULT Result = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Result$[ebp], 0

; 18   : 	switch (Message) {

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  00032	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00038	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv64[ebp]
  0003e	83 e9 02	 sub	 ecx, 2
  00041	89 8d a8 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], ecx
  00047	83 bd a8 fe ff
	ff 1a		 cmp	 DWORD PTR tv64[ebp], 26	; 0000001aH
  0004e	0f 87 5c 01 00
	00		 ja	 $LN12@MainWindow
  00054	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR tv64[ebp]
  0005a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN14@MainWindow[edx]
  00061	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@MainWindow[eax*4]
$LN4@MainWindow:

; 19   : 		case WM_SIZE:
; 20   : 		{
; 21   : 			OutputDebugStringA("WM_SIZE\n");

  00068	8b f4		 mov	 esi, esp
  0006a	68 00 00 00 00	 push	 OFFSET ??_C@_08JPDHIBIK@WM_SIZE?6?$AA@
  0006f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  00075	3b f4		 cmp	 esi, esp
  00077	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 22   : 		} break;

  0007c	e9 51 01 00 00	 jmp	 $LN2@MainWindow
$LN5@MainWindow:

; 23   : 		case WM_DESTROY:
; 24   : 		{
; 25   : 			OutputDebugStringA("WM_DESTROY\n");

  00081	8b f4		 mov	 esi, esp
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@
  00088	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  0008e	3b f4		 cmp	 esi, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 26   : 		} break;

  00095	e9 38 01 00 00	 jmp	 $LN2@MainWindow
$LN6@MainWindow:

; 27   : 		case WM_CLOSE:
; 28   : 		{
; 29   : 			OutputDebugStringA("WM_CLOSE\n");

  0009a	8b f4		 mov	 esi, esp
  0009c	68 00 00 00 00	 push	 OFFSET ??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 30   : 			PostQuitMessage(0);

  000ae	8b f4		 mov	 esi, esp
  000b0	6a 00		 push	 0
  000b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PostQuitMessage@4
  000b8	3b f4		 cmp	 esi, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 31   : 		} break;

  000bf	e9 0e 01 00 00	 jmp	 $LN2@MainWindow
$LN7@MainWindow:

; 32   : 		case WM_QUIT:
; 33   : 		{
; 34   : 			OutputDebugStringA("WM_QUIT\n");

  000c4	8b f4		 mov	 esi, esp
  000c6	68 00 00 00 00	 push	 OFFSET ??_C@_08CIKHGLDE@WM_QUIT?6?$AA@
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 35   : 		} break;

  000d8	e9 f5 00 00 00	 jmp	 $LN2@MainWindow
$LN8@MainWindow:

; 36   : 		case WM_ACTIVATEAPP:
; 37   : 		{
; 38   : 			OutputDebugStringA("WM_ACTIVATEAPP\n");

  000dd	8b f4		 mov	 esi, esp
  000df	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@
  000e4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000ea	3b f4		 cmp	 esi, esp
  000ec	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 		} break;

  000f1	e9 dc 00 00 00	 jmp	 $LN2@MainWindow
$LN9@MainWindow:

; 40   : 		case WM_PAINT:
; 41   : 		{
; 42   : 			PAINTSTRUCT Paint;
; 43   : 			HDC DeviceContext = BeginPaint(Window, &Paint);

  000f6	8b f4		 mov	 esi, esp
  000f8	8d 45 ac	 lea	 eax, DWORD PTR _Paint$6[ebp]
  000fb	50		 push	 eax
  000fc	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  000ff	51		 push	 ecx
  00100	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  00106	3b f4		 cmp	 esi, esp
  00108	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0010d	89 45 a0	 mov	 DWORD PTR _DeviceContext$5[ebp], eax

; 44   : 			int X = Paint.rcPaint.left;

  00110	8b 45 b4	 mov	 eax, DWORD PTR _Paint$6[ebp+8]
  00113	89 45 94	 mov	 DWORD PTR _X$4[ebp], eax

; 45   : 			int Y = Paint.rcPaint.top;

  00116	8b 45 b8	 mov	 eax, DWORD PTR _Paint$6[ebp+12]
  00119	89 45 88	 mov	 DWORD PTR _Y$3[ebp], eax

; 46   : 			int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  0011c	8b 45 bc	 mov	 eax, DWORD PTR _Paint$6[ebp+16]
  0011f	2b 45 b4	 sub	 eax, DWORD PTR _Paint$6[ebp+8]
  00122	89 85 7c ff ff
	ff		 mov	 DWORD PTR _Width$2[ebp], eax

; 47   : 			int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  00128	8b 45 c0	 mov	 eax, DWORD PTR _Paint$6[ebp+20]
  0012b	2b 45 b8	 sub	 eax, DWORD PTR _Paint$6[ebp+12]
  0012e	89 85 70 ff ff
	ff		 mov	 DWORD PTR _Height$1[ebp], eax

; 48   : 			static DWORD Operation = WHITENESS;
; 49   : 			PatBlt(DeviceContext, X, Y, Width, Height, Operation);

  00134	8b f4		 mov	 esi, esp
  00136	a1 00 00 00 00	 mov	 eax, DWORD PTR ?Operation@?9??MainWindowCallback@@YGJPAUHWND__@@IIJ@Z@4KA
  0013b	50		 push	 eax
  0013c	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _Height$1[ebp]
  00142	51		 push	 ecx
  00143	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _Width$2[ebp]
  00149	52		 push	 edx
  0014a	8b 45 88	 mov	 eax, DWORD PTR _Y$3[ebp]
  0014d	50		 push	 eax
  0014e	8b 4d 94	 mov	 ecx, DWORD PTR _X$4[ebp]
  00151	51		 push	 ecx
  00152	8b 55 a0	 mov	 edx, DWORD PTR _DeviceContext$5[ebp]
  00155	52		 push	 edx
  00156	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PatBlt@24
  0015c	3b f4		 cmp	 esi, esp
  0015e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 50   : 			if (Operation == WHITENESS) {

  00163	81 3d 00 00 00
	00 62 00 ff 00	 cmp	 DWORD PTR ?Operation@?9??MainWindowCallback@@YGJPAUHWND__@@IIJ@Z@4KA, 16711778 ; 00ff0062H
  0016d	75 0c		 jne	 SHORT $LN10@MainWindow

; 51   : 				Operation = BLACKNESS;

  0016f	c7 05 00 00 00
	00 42 00 00 00	 mov	 DWORD PTR ?Operation@?9??MainWindowCallback@@YGJPAUHWND__@@IIJ@Z@4KA, 66 ; 00000042H

; 52   : 			}
; 53   : 			else {

  00179	eb 0a		 jmp	 SHORT $LN11@MainWindow
$LN10@MainWindow:

; 54   : 				Operation = WHITENESS;

  0017b	c7 05 00 00 00
	00 62 00 ff 00	 mov	 DWORD PTR ?Operation@?9??MainWindowCallback@@YGJPAUHWND__@@IIJ@Z@4KA, 16711778 ; 00ff0062H
$LN11@MainWindow:

; 55   : 			}
; 56   : 
; 57   : 			EndPaint(Window,&Paint);

  00185	8b f4		 mov	 esi, esp
  00187	8d 45 ac	 lea	 eax, DWORD PTR _Paint$6[ebp]
  0018a	50		 push	 eax
  0018b	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  0018e	51		 push	 ecx
  0018f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
  00195	3b f4		 cmp	 esi, esp
  00197	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 58   : 			OutputDebugStringA("WM_PAINT\n");

  0019c	8b f4		 mov	 esi, esp
  0019e	68 00 00 00 00	 push	 OFFSET ??_C@_09LMMFEECM@WM_PAINT?6?$AA@
  001a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  001a9	3b f4		 cmp	 esi, esp
  001ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN12@MainWindow:

; 59   : 		}
; 60   : 		default:
; 61   : 		{
; 62   : 			Result = DefWindowProc(Window,Message,WParam,LParam);

  001b0	8b f4		 mov	 esi, esp
  001b2	8b 45 14	 mov	 eax, DWORD PTR _LParam$[ebp]
  001b5	50		 push	 eax
  001b6	8b 4d 10	 mov	 ecx, DWORD PTR _WParam$[ebp]
  001b9	51		 push	 ecx
  001ba	8b 55 0c	 mov	 edx, DWORD PTR _Message$[ebp]
  001bd	52		 push	 edx
  001be	8b 45 08	 mov	 eax, DWORD PTR _Window$[ebp]
  001c1	50		 push	 eax
  001c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  001c8	3b f4		 cmp	 esi, esp
  001ca	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001cf	89 45 f4	 mov	 DWORD PTR _Result$[ebp], eax
$LN2@MainWindow:

; 63   : 			//6OutputDebugStringA("default\n");
; 64   : 		} break;
; 65   : 	}
; 66   : 	
; 67   : 	return(Result);

  001d2	8b 45 f4	 mov	 eax, DWORD PTR _Result$[ebp]

; 68   : }

  001d5	52		 push	 edx
  001d6	8b cd		 mov	 ecx, ebp
  001d8	50		 push	 eax
  001d9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@MainWindow
  001df	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e4	58		 pop	 eax
  001e5	5a		 pop	 edx
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	5b		 pop	 ebx
  001e9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ec	33 cd		 xor	 ecx, ebp
  001ee	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f3	81 c4 58 01 00
	00		 add	 esp, 344		; 00000158H
  001f9	3b ec		 cmp	 ebp, esp
  001fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00200	8b e5		 mov	 esp, ebp
  00202	5d		 pop	 ebp
  00203	c2 10 00	 ret	 16			; 00000010H
  00206	66 90		 npad	 2
$LN17@MainWindow:
  00208	01 00 00 00	 DD	 1
  0020c	00 00 00 00	 DD	 $LN16@MainWindow
$LN16@MainWindow:
  00210	ac ff ff ff	 DD	 -84			; ffffffacH
  00214	40 00 00 00	 DD	 64			; 00000040H
  00218	00 00 00 00	 DD	 $LN15@MainWindow
$LN15@MainWindow:
  0021c	50		 DB	 80			; 00000050H
  0021d	61		 DB	 97			; 00000061H
  0021e	69		 DB	 105			; 00000069H
  0021f	6e		 DB	 110			; 0000006eH
  00220	74		 DB	 116			; 00000074H
  00221	00		 DB	 0
  00222	66 90		 npad	 2
$LN18@MainWindow:
  00224	00 00 00 00	 DD	 $LN5@MainWindow
  00228	00 00 00 00	 DD	 $LN4@MainWindow
  0022c	00 00 00 00	 DD	 $LN9@MainWindow
  00230	00 00 00 00	 DD	 $LN6@MainWindow
  00234	00 00 00 00	 DD	 $LN7@MainWindow
  00238	00 00 00 00	 DD	 $LN8@MainWindow
  0023c	00 00 00 00	 DD	 $LN12@MainWindow
$LN14@MainWindow:
  00240	00		 DB	 0
  00241	06		 DB	 6
  00242	06		 DB	 6
  00243	01		 DB	 1
  00244	06		 DB	 6
  00245	06		 DB	 6
  00246	06		 DB	 6
  00247	06		 DB	 6
  00248	06		 DB	 6
  00249	06		 DB	 6
  0024a	06		 DB	 6
  0024b	06		 DB	 6
  0024c	06		 DB	 6
  0024d	02		 DB	 2
  0024e	03		 DB	 3
  0024f	06		 DB	 6
  00250	04		 DB	 4
  00251	06		 DB	 6
  00252	06		 DB	 6
  00253	06		 DB	 6
  00254	06		 DB	 6
  00255	06		 DB	 6
  00256	06		 DB	 6
  00257	06		 DB	 6
  00258	06		 DB	 6
  00259	06		 DB	 6
  0025a	05		 DB	 5
?MainWindowCallback@@YGJPAUHWND__@@IIJ@Z ENDP		; MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mitoskalandiel\documents\visual studio 2015\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_MessageResult$1 = -108					; size = 4
_Message$2 = -96					; size = 28
_WindowHandle$3 = -60					; size = 4
_WindowClass$ = -48					; size = 40
__$ArrayPad$ = -4					; size = 4
_Instance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_CommandLine$ = 16					; size = 4
_ShowCode$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 70   : int CALLBACK WinMain(HINSTANCE Instance, HINSTANCE hPrevInstance, LPSTR CommandLine, int ShowCode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 71   : 	WNDCLASS WindowClass = {};

  00028	33 c0		 xor	 eax, eax
  0002a	89 45 d0	 mov	 DWORD PTR _WindowClass$[ebp], eax
  0002d	89 45 d4	 mov	 DWORD PTR _WindowClass$[ebp+4], eax
  00030	89 45 d8	 mov	 DWORD PTR _WindowClass$[ebp+8], eax
  00033	89 45 dc	 mov	 DWORD PTR _WindowClass$[ebp+12], eax
  00036	89 45 e0	 mov	 DWORD PTR _WindowClass$[ebp+16], eax
  00039	89 45 e4	 mov	 DWORD PTR _WindowClass$[ebp+20], eax
  0003c	89 45 e8	 mov	 DWORD PTR _WindowClass$[ebp+24], eax
  0003f	89 45 ec	 mov	 DWORD PTR _WindowClass$[ebp+28], eax
  00042	89 45 f0	 mov	 DWORD PTR _WindowClass$[ebp+32], eax
  00045	89 45 f4	 mov	 DWORD PTR _WindowClass$[ebp+36], eax

; 72   : 	WindowClass.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;

  00048	c7 45 d0 23 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp], 35 ; 00000023H

; 73   : 	WindowClass.lpfnWndProc = MainWindowCallback;

  0004f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp+4], OFFSET ?MainWindowCallback@@YGJPAUHWND__@@IIJ@Z ; MainWindowCallback

; 74   : 	WindowClass.hInstance = Instance;

  00056	8b 45 08	 mov	 eax, DWORD PTR _Instance$[ebp]
  00059	89 45 e0	 mov	 DWORD PTR _WindowClass$[ebp+16], eax

; 75   : 	//WindowClass.hIcon = ;
; 76   : 	//WindowClass.hCursor = ;
; 77   : 	WindowClass.lpszClassName = "hmhWindowClass";

  0005c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp+36], OFFSET ??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@

; 78   : 	if (RegisterClass(&WindowClass))

  00063	8b f4		 mov	 esi, esp
  00065	8d 45 d0	 lea	 eax, DWORD PTR _WindowClass$[ebp]
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	0f b7 c8	 movzx	 ecx, ax
  00079	85 c9		 test	 ecx, ecx
  0007b	0f 84 94 00 00
	00		 je	 $LN6@WinMain

; 79   : 	{
; 80   : 		HWND WindowHandle = CreateWindowEx(

  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	8b 45 08	 mov	 eax, DWORD PTR _Instance$[ebp]
  00088	50		 push	 eax
  00089	6a 00		 push	 0
  0008b	6a 00		 push	 0
  0008d	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00092	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00097	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0009c	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000a1	68 00 00 cf 10	 push	 282001408		; 10cf0000H
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _WindowClass$[ebp+36]
  000ae	51		 push	 ecx
  000af	6a 00		 push	 0
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	89 45 c4	 mov	 DWORD PTR _WindowHandle$3[ebp], eax

; 81   : 			0,
; 82   : 			WindowClass.lpszClassName,
; 83   : 			"Handmade Hero v0.1",
; 84   : 			WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 85   : 			CW_USEDEFAULT,
; 86   : 			CW_USEDEFAULT,
; 87   : 			CW_USEDEFAULT,
; 88   : 			CW_USEDEFAULT,
; 89   : 			0,
; 90   : 			0,
; 91   : 			Instance,
; 92   : 			0);
; 93   : 		if (WindowHandle)

  000c1	83 7d c4 00	 cmp	 DWORD PTR _WindowHandle$3[ebp], 0
  000c5	74 4e		 je	 SHORT $LN6@WinMain
$LN4@WinMain:

; 94   : 		{
; 95   : 			for (;;)
; 96   : 			{
; 97   : 				MSG Message;
; 98   : 				BOOL MessageResult = GetMessage(&Message, 0, 0, 0);

  000c7	8b f4		 mov	 esi, esp
  000c9	6a 00		 push	 0
  000cb	6a 00		 push	 0
  000cd	6a 00		 push	 0
  000cf	8d 45 a0	 lea	 eax, DWORD PTR _Message$2[ebp]
  000d2	50		 push	 eax
  000d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessageA@16
  000d9	3b f4		 cmp	 esi, esp
  000db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e0	89 45 94	 mov	 DWORD PTR _MessageResult$1[ebp], eax

; 99   : 				if (MessageResult > 0) {

  000e3	83 7d 94 00	 cmp	 DWORD PTR _MessageResult$1[ebp], 0
  000e7	7e 28		 jle	 SHORT $LN9@WinMain

; 100  : 					TranslateMessage(&Message);

  000e9	8b f4		 mov	 esi, esp
  000eb	8d 45 a0	 lea	 eax, DWORD PTR _Message$2[ebp]
  000ee	50		 push	 eax
  000ef	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMessage@4
  000f5	3b f4		 cmp	 esi, esp
  000f7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 101  : 					DispatchMessage(&Message);

  000fc	8b f4		 mov	 esi, esp
  000fe	8d 45 a0	 lea	 eax, DWORD PTR _Message$2[ebp]
  00101	50		 push	 eax
  00102	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4
  00108	3b f4		 cmp	 esi, esp
  0010a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 102  : 				}
; 103  : 				else {

  0010f	eb 02		 jmp	 SHORT $LN10@WinMain
$LN9@WinMain:

; 104  : 					break;

  00111	eb 02		 jmp	 SHORT $LN6@WinMain
$LN10@WinMain:

; 105  : 				}
; 106  : 			}

  00113	eb b2		 jmp	 SHORT $LN4@WinMain
$LN6@WinMain:

; 107  : 			
; 108  : 		}
; 109  : 		else
; 110  : 		{
; 111  : 			//TODO(smzb): Log this event
; 112  : 		}
; 113  : 	}
; 114  : 	else {
; 115  : 		//TODO(smzb): log this event
; 116  : 	}
; 117  : 	MessageBox(0, "This is Handmade Hero", "Handmade Hero v0.1", MB_OK | MB_ICONINFORMATION);

  00115	8b f4		 mov	 esi, esp
  00117	6a 40		 push	 64			; 00000040H
  00119	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
  0011e	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@
  00123	6a 00		 push	 0
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 118  : 	return 0;

  00132	33 c0		 xor	 eax, eax

; 119  : }

  00134	52		 push	 edx
  00135	8b cd		 mov	 ecx, ebp
  00137	50		 push	 eax
  00138	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN15@WinMain
  0013e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00143	58		 pop	 eax
  00144	5a		 pop	 edx
  00145	5f		 pop	 edi
  00146	5e		 pop	 esi
  00147	5b		 pop	 ebx
  00148	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0014b	33 cd		 xor	 ecx, ebp
  0014d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00152	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  00158	3b ec		 cmp	 ebp, esp
  0015a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 10 00	 ret	 16			; 00000010H
  00165	0f 1f 00	 npad	 3
$LN15@WinMain:
  00168	02 00 00 00	 DD	 2
  0016c	00 00 00 00	 DD	 $LN14@WinMain
$LN14@WinMain:
  00170	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00174	28 00 00 00	 DD	 40			; 00000028H
  00178	00 00 00 00	 DD	 $LN12@WinMain
  0017c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00180	1c 00 00 00	 DD	 28			; 0000001cH
  00184	00 00 00 00	 DD	 $LN13@WinMain
$LN13@WinMain:
  00188	4d		 DB	 77			; 0000004dH
  00189	65		 DB	 101			; 00000065H
  0018a	73		 DB	 115			; 00000073H
  0018b	73		 DB	 115			; 00000073H
  0018c	61		 DB	 97			; 00000061H
  0018d	67		 DB	 103			; 00000067H
  0018e	65		 DB	 101			; 00000065H
  0018f	00		 DB	 0
$LN12@WinMain:
  00190	57		 DB	 87			; 00000057H
  00191	69		 DB	 105			; 00000069H
  00192	6e		 DB	 110			; 0000006eH
  00193	64		 DB	 100			; 00000064H
  00194	6f		 DB	 111			; 0000006fH
  00195	77		 DB	 119			; 00000077H
  00196	43		 DB	 67			; 00000043H
  00197	6c		 DB	 108			; 0000006cH
  00198	61		 DB	 97			; 00000061H
  00199	73		 DB	 115			; 00000073H
  0019a	73		 DB	 115			; 00000073H
  0019b	00		 DB	 0
_WinMain@16 ENDP
_TEXT	ENDS
END
