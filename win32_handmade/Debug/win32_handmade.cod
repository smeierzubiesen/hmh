; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Projects\hmh\win32_handmade\win32_handmade.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?XInputGetStateStub@@YGKKPAU_XINPUT_STATE@@@Z	; XInputGetStateStub
PUBLIC	?XInputSetStateStub@@YGKKPAU_XINPUT_VIBRATION@@@Z ; XInputSetStateStub
_BSS	SEGMENT
?Debug@@3_NA DB	01H DUP (?)				; Debug
_BSS	ENDS
_DATA	SEGMENT
?XInputGetState_@@3P6GKKPAU_XINPUT_STATE@@@ZA DD FLAT:?XInputGetStateStub@@YGKKPAU_XINPUT_STATE@@@Z ; XInputGetState_
?XInputSetState_@@3P6GKKPAU_XINPUT_VIBRATION@@@ZA DD FLAT:?XInputSetStateStub@@YGKKPAU_XINPUT_VIBRATION@@@Z ; XInputSetState_
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PAUHWND__@@@Z ; Win32GetWindowDimensions
PUBLIC	?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z	; Win32MainWindowCallback
PUBLIC	??_C@_08JPDHIBIK@WM_SIZE?6?$AA@			; `string'
PUBLIC	??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@		; `string'
PUBLIC	??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@		; `string'
PUBLIC	??_C@_08CIKHGLDE@WM_QUIT?6?$AA@			; `string'
PUBLIC	??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@	; `string'
PUBLIC	??_C@_09LMMFEECM@WM_PAINT?6?$AA@		; `string'
PUBLIC	??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@		; `string'
PUBLIC	??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@	; `string'
PUBLIC	??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@ ; `string'
EXTRN	_memset:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	__imp__VirtualFree@12:PROC
EXTRN	__imp__StretchDIBits@52:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
	ALIGN	4

?GlobalRunning@@3_NA DB 01H DUP (?)			; GlobalRunning
	ALIGN	4

?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A DB 040H DUP (?) ; GlobalBackBuffer
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@
CONST	SEGMENT
??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@ DB 'This is Handmade Her'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
CONST	SEGMENT
??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@ DB 'Handmade Hero v0.1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@
CONST	SEGMENT
??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@ DB 'hmhWindowClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMMFEECM@WM_PAINT?6?$AA@
CONST	SEGMENT
??_C@_09LMMFEECM@WM_PAINT?6?$AA@ DB 'WM_PAINT', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@
CONST	SEGMENT
??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@ DB 'WM_ACTIVATEAPP', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIKHGLDE@WM_QUIT?6?$AA@
CONST	SEGMENT
??_C@_08CIKHGLDE@WM_QUIT?6?$AA@ DB 'WM_QUIT', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@
CONST	SEGMENT
??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@ DB 'WM_CLOSE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@
CONST	SEGMENT
??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@ DB 'WM_DESTROY', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPDHIBIK@WM_SIZE?6?$AA@
CONST	SEGMENT
??_C@_08JPDHIBIK@WM_SIZE?6?$AA@ DB 'WM_SIZE', 0aH, 00H	; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv64 = -376						; size = 4
$T1 = -368						; size = 8
_Dimensions$2 = -160					; size = 8
_Height$3 = -144					; size = 4
_Width$4 = -132						; size = 4
_Y$5 = -120						; size = 4
_X$6 = -108						; size = 4
_DeviceContext$7 = -96					; size = 4
_Paint$8 = -84						; size = 64
_Result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_Window$ = 8						; size = 4
_Message$ = 12						; size = 4
_WParam$ = 16						; size = 4
_LParam$ = 20						; size = 4
?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z PROC	; Win32MainWindowCallback, COMDAT

; 90   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 78 01 00
	00		 sub	 esp, 376		; 00000178H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 88 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-376]
  00012	b9 5e 00 00 00	 mov	 ecx, 94			; 0000005eH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 91   : 	LRESULT Result = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Result$[ebp], 0

; 92   : 	switch (Message) {

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  00032	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00038	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv64[ebp]
  0003e	83 e9 02	 sub	 ecx, 2
  00041	89 8d 88 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], ecx
  00047	83 bd 88 fe ff
	ff 1a		 cmp	 DWORD PTR tv64[ebp], 26	; 0000001aH
  0004e	0f 87 bd 01 00
	00		 ja	 $LN16@Win32MainW
  00054	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR tv64[ebp]
  0005a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN18@Win32MainW[edx]
  00061	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN23@Win32MainW[eax*4]
$LN4@Win32MainW:

; 93   : 		case WM_SIZE:
; 94   : 		{
; 95   : 			if (Debug) { OutputDebugStringA("WM_SIZE\n"); }

  00068	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  0006f	85 c0		 test	 eax, eax
  00071	74 14		 je	 SHORT $LN5@Win32MainW
  00073	8b f4		 mov	 esi, esp
  00075	68 00 00 00 00	 push	 OFFSET ??_C@_08JPDHIBIK@WM_SIZE?6?$AA@
  0007a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  00080	3b f4		 cmp	 esi, esp
  00082	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN5@Win32MainW:

; 96   : 		} break;

  00087	e9 a7 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 97   : 		case WM_DESTROY:
; 98   : 		{
; 99   : 			GlobalRunning = false;

  0008c	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 100  : 			if (Debug) { OutputDebugStringA("WM_DESTROY\n"); }

  00093	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  0009a	85 c0		 test	 eax, eax
  0009c	74 14		 je	 SHORT $LN7@Win32MainW
  0009e	8b f4		 mov	 esi, esp
  000a0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@
  000a5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000ab	3b f4		 cmp	 esi, esp
  000ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN7@Win32MainW:

; 101  : 		} break;

  000b2	e9 7c 01 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 102  : 		case WM_CLOSE:
; 103  : 		{
; 104  : 			GlobalRunning = false;

  000b7	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0

; 105  : 			if (Debug) { OutputDebugStringA("WM_CLOSE\n"); }

  000be	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  000c5	85 c0		 test	 eax, eax
  000c7	74 14		 je	 SHORT $LN9@Win32MainW
  000c9	8b f4		 mov	 esi, esp
  000cb	68 00 00 00 00	 push	 OFFSET ??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@
  000d0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000d6	3b f4		 cmp	 esi, esp
  000d8	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN9@Win32MainW:

; 106  : 		} break;

  000dd	e9 51 01 00 00	 jmp	 $LN2@Win32MainW
$LN10@Win32MainW:

; 107  : 		case WM_QUIT:
; 108  : 		{
; 109  : 			if (Debug) { OutputDebugStringA("WM_QUIT\n"); }

  000e2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  000e9	85 c0		 test	 eax, eax
  000eb	74 14		 je	 SHORT $LN11@Win32MainW
  000ed	8b f4		 mov	 esi, esp
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_08CIKHGLDE@WM_QUIT?6?$AA@
  000f4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000fa	3b f4		 cmp	 esi, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN11@Win32MainW:

; 110  : 		} break;

  00101	e9 2d 01 00 00	 jmp	 $LN2@Win32MainW
$LN12@Win32MainW:

; 111  : 		case WM_ACTIVATEAPP:
; 112  : 		{
; 113  : 			if (Debug) { OutputDebugStringA("WM_ACTIVATEAPP\n"); }

  00106	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  0010d	85 c0		 test	 eax, eax
  0010f	74 14		 je	 SHORT $LN13@Win32MainW
  00111	8b f4		 mov	 esi, esp
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  0011e	3b f4		 cmp	 esi, esp
  00120	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN13@Win32MainW:

; 114  : 		} break;

  00125	e9 09 01 00 00	 jmp	 $LN2@Win32MainW
$LN14@Win32MainW:

; 115  : 		case WM_PAINT:
; 116  : 		{
; 117  : 			PAINTSTRUCT Paint;
; 118  : 			HDC DeviceContext = BeginPaint(Window, &Paint);

  0012a	8b f4		 mov	 esi, esp
  0012c	8d 45 ac	 lea	 eax, DWORD PTR _Paint$8[ebp]
  0012f	50		 push	 eax
  00130	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  00133	51		 push	 ecx
  00134	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  0013a	3b f4		 cmp	 esi, esp
  0013c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00141	89 45 a0	 mov	 DWORD PTR _DeviceContext$7[ebp], eax

; 119  : 			int X = Paint.rcPaint.left;

  00144	8b 45 b4	 mov	 eax, DWORD PTR _Paint$8[ebp+8]
  00147	89 45 94	 mov	 DWORD PTR _X$6[ebp], eax

; 120  : 			int Y = Paint.rcPaint.top;

  0014a	8b 45 b8	 mov	 eax, DWORD PTR _Paint$8[ebp+12]
  0014d	89 45 88	 mov	 DWORD PTR _Y$5[ebp], eax

; 121  : 			int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  00150	8b 45 bc	 mov	 eax, DWORD PTR _Paint$8[ebp+16]
  00153	2b 45 b4	 sub	 eax, DWORD PTR _Paint$8[ebp+8]
  00156	89 85 7c ff ff
	ff		 mov	 DWORD PTR _Width$4[ebp], eax

; 122  : 			int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  0015c	8b 45 c0	 mov	 eax, DWORD PTR _Paint$8[ebp+20]
  0015f	2b 45 b8	 sub	 eax, DWORD PTR _Paint$8[ebp+12]
  00162	89 85 70 ff ff
	ff		 mov	 DWORD PTR _Height$3[ebp], eax

; 123  : 			win32_window_dimensions Dimensions = Win32GetWindowDimensions(Window);

  00168	8b 45 08	 mov	 eax, DWORD PTR _Window$[ebp]
  0016b	50		 push	 eax
  0016c	e8 00 00 00 00	 call	 ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PAUHWND__@@@Z ; Win32GetWindowDimensions
  00171	83 c4 04	 add	 esp, 4
  00174	89 85 90 fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0017a	89 95 94 fe ff
	ff		 mov	 DWORD PTR $T1[ebp+4], edx
  00180	8b 8d 90 fe ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00186	89 8d 60 ff ff
	ff		 mov	 DWORD PTR _Dimensions$2[ebp], ecx
  0018c	8b 95 94 fe ff
	ff		 mov	 edx, DWORD PTR $T1[ebp+4]
  00192	89 95 64 ff ff
	ff		 mov	 DWORD PTR _Dimensions$2[ebp+4], edx

; 124  : 			Win32DisplayBufferInWindow(DeviceContext, Dimensions.Width, Dimensions.Height, GlobalBackBuffer , X, Y, Width, Height);

  00198	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _Height$3[ebp]
  0019e	50		 push	 eax
  0019f	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _Width$4[ebp]
  001a5	51		 push	 ecx
  001a6	8b 55 88	 mov	 edx, DWORD PTR _Y$5[ebp]
  001a9	52		 push	 edx
  001aa	8b 45 94	 mov	 eax, DWORD PTR _X$6[ebp]
  001ad	50		 push	 eax
  001ae	83 ec 40	 sub	 esp, 64			; 00000040H
  001b1	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  001b6	be 00 00 00 00	 mov	 esi, OFFSET ?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  001bb	8b fc		 mov	 edi, esp
  001bd	f3 a5		 rep movsd
  001bf	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _Dimensions$2[ebp+4]
  001c5	51		 push	 ecx
  001c6	8b 95 60 ff ff
	ff		 mov	 edx, DWORD PTR _Dimensions$2[ebp]
  001cc	52		 push	 edx
  001cd	8b 45 a0	 mov	 eax, DWORD PTR _DeviceContext$7[ebp]
  001d0	50		 push	 eax
  001d1	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow
  001d6	83 c4 5c	 add	 esp, 92			; 0000005cH

; 125  : 			EndPaint(Window,&Paint);

  001d9	8b f4		 mov	 esi, esp
  001db	8d 45 ac	 lea	 eax, DWORD PTR _Paint$8[ebp]
  001de	50		 push	 eax
  001df	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  001e2	51		 push	 ecx
  001e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
  001e9	3b f4		 cmp	 esi, esp
  001eb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 126  : 			if (Debug) { OutputDebugStringA("WM_PAINT\n"); }

  001f0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  001f7	85 c0		 test	 eax, eax
  001f9	74 14		 je	 SHORT $LN15@Win32MainW
  001fb	8b f4		 mov	 esi, esp
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_09LMMFEECM@WM_PAINT?6?$AA@
  00202	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  00208	3b f4		 cmp	 esi, esp
  0020a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN15@Win32MainW:

; 127  : 		} break;

  0020f	eb 22		 jmp	 SHORT $LN2@Win32MainW
$LN16@Win32MainW:

; 128  : 		default:
; 129  : 		{
; 130  : 			Result = DefWindowProc(Window,Message,WParam,LParam);

  00211	8b f4		 mov	 esi, esp
  00213	8b 45 14	 mov	 eax, DWORD PTR _LParam$[ebp]
  00216	50		 push	 eax
  00217	8b 4d 10	 mov	 ecx, DWORD PTR _WParam$[ebp]
  0021a	51		 push	 ecx
  0021b	8b 55 0c	 mov	 edx, DWORD PTR _Message$[ebp]
  0021e	52		 push	 edx
  0021f	8b 45 08	 mov	 eax, DWORD PTR _Window$[ebp]
  00222	50		 push	 eax
  00223	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  00229	3b f4		 cmp	 esi, esp
  0022b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00230	89 45 f4	 mov	 DWORD PTR _Result$[ebp], eax
$LN2@Win32MainW:

; 131  : 			//OutputDebugStringA("default\n");
; 132  : 		} break;
; 133  : 	}
; 134  : 	
; 135  : 	return(Result);

  00233	8b 45 f4	 mov	 eax, DWORD PTR _Result$[ebp]

; 136  : }

  00236	52		 push	 edx
  00237	8b cd		 mov	 ecx, ebp
  00239	50		 push	 eax
  0023a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN22@Win32MainW
  00240	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00245	58		 pop	 eax
  00246	5a		 pop	 edx
  00247	5f		 pop	 edi
  00248	5e		 pop	 esi
  00249	5b		 pop	 ebx
  0024a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0024d	33 cd		 xor	 ecx, ebp
  0024f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00254	81 c4 78 01 00
	00		 add	 esp, 376		; 00000178H
  0025a	3b ec		 cmp	 ebp, esp
  0025c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00261	8b e5		 mov	 esp, ebp
  00263	5d		 pop	 ebp
  00264	c2 10 00	 ret	 16			; 00000010H
  00267	90		 npad	 1
$LN22@Win32MainW:
  00268	02 00 00 00	 DD	 2
  0026c	00 00 00 00	 DD	 $LN21@Win32MainW
$LN21@Win32MainW:
  00270	ac ff ff ff	 DD	 -84			; ffffffacH
  00274	40 00 00 00	 DD	 64			; 00000040H
  00278	00 00 00 00	 DD	 $LN19@Win32MainW
  0027c	60 ff ff ff	 DD	 -160			; ffffff60H
  00280	08 00 00 00	 DD	 8
  00284	00 00 00 00	 DD	 $LN20@Win32MainW
$LN20@Win32MainW:
  00288	44		 DB	 68			; 00000044H
  00289	69		 DB	 105			; 00000069H
  0028a	6d		 DB	 109			; 0000006dH
  0028b	65		 DB	 101			; 00000065H
  0028c	6e		 DB	 110			; 0000006eH
  0028d	73		 DB	 115			; 00000073H
  0028e	69		 DB	 105			; 00000069H
  0028f	6f		 DB	 111			; 0000006fH
  00290	6e		 DB	 110			; 0000006eH
  00291	73		 DB	 115			; 00000073H
  00292	00		 DB	 0
$LN19@Win32MainW:
  00293	50		 DB	 80			; 00000050H
  00294	61		 DB	 97			; 00000061H
  00295	69		 DB	 105			; 00000069H
  00296	6e		 DB	 110			; 0000006eH
  00297	74		 DB	 116			; 00000074H
  00298	00		 DB	 0
  00299	0f 1f 00	 npad	 3
$LN23@Win32MainW:
  0029c	00 00 00 00	 DD	 $LN6@Win32MainW
  002a0	00 00 00 00	 DD	 $LN4@Win32MainW
  002a4	00 00 00 00	 DD	 $LN14@Win32MainW
  002a8	00 00 00 00	 DD	 $LN8@Win32MainW
  002ac	00 00 00 00	 DD	 $LN10@Win32MainW
  002b0	00 00 00 00	 DD	 $LN12@Win32MainW
  002b4	00 00 00 00	 DD	 $LN16@Win32MainW
$LN18@Win32MainW:
  002b8	00		 DB	 0
  002b9	06		 DB	 6
  002ba	06		 DB	 6
  002bb	01		 DB	 1
  002bc	06		 DB	 6
  002bd	06		 DB	 6
  002be	06		 DB	 6
  002bf	06		 DB	 6
  002c0	06		 DB	 6
  002c1	06		 DB	 6
  002c2	06		 DB	 6
  002c3	06		 DB	 6
  002c4	06		 DB	 6
  002c5	02		 DB	 2
  002c6	03		 DB	 3
  002c7	06		 DB	 6
  002c8	04		 DB	 4
  002c9	06		 DB	 6
  002ca	06		 DB	 6
  002cb	06		 DB	 6
  002cc	06		 DB	 6
  002cd	06		 DB	 6
  002ce	06		 DB	 6
  002cf	06		 DB	 6
  002d0	06		 DB	 6
  002d1	06		 DB	 6
  002d2	05		 DB	 5
?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32DisplayBufferInWindow@@YAXPAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z
_TEXT	SEGMENT
_DeviceContext$ = 8					; size = 4
_WindowWidth$ = 12					; size = 4
_WindowHeight$ = 16					; size = 4
_Buffer$ = 20						; size = 64
_X$ = 84						; size = 4
_Y$ = 88						; size = 4
_Width$ = 92						; size = 4
_Height$ = 96						; size = 4
?Win32DisplayBufferInWindow@@YAXPAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z PROC ; Win32DisplayBufferInWindow, COMDAT

; 77   : internal void Win32DisplayBufferInWindow(HDC DeviceContext, int WindowWidth, int WindowHeight, win32_offscreen_buffer Buffer, int X, int Y, int Width, int Height) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 78   : 	StretchDIBits(DeviceContext, 0, 0, WindowWidth, WindowHeight, 0, 0, Buffer.Width, Buffer.Height, Buffer.Memory, &Buffer.Info, DIB_RGB_COLORS, SRCCOPY);

  0001e	8b f4		 mov	 esi, esp
  00020	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00025	6a 00		 push	 0
  00027	8d 45 14	 lea	 eax, DWORD PTR _Buffer$[ebp]
  0002a	50		 push	 eax
  0002b	8b 4d 40	 mov	 ecx, DWORD PTR _Buffer$[ebp+44]
  0002e	51		 push	 ecx
  0002f	8b 55 4c	 mov	 edx, DWORD PTR _Buffer$[ebp+56]
  00032	52		 push	 edx
  00033	8b 45 48	 mov	 eax, DWORD PTR _Buffer$[ebp+52]
  00036	50		 push	 eax
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	8b 4d 10	 mov	 ecx, DWORD PTR _WindowHeight$[ebp]
  0003e	51		 push	 ecx
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _WindowWidth$[ebp]
  00042	52		 push	 edx
  00043	6a 00		 push	 0
  00045	6a 00		 push	 0
  00047	8b 45 08	 mov	 eax, DWORD PTR _DeviceContext$[ebp]
  0004a	50		 push	 eax
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StretchDIBits@52
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 79   : }

  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?Win32DisplayBufferInWindow@@YAXPAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ENDP ; Win32DisplayBufferInWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32ResizeDIBSection@@YAXPAUwin32_offscreen_buffer@@HH@Z
_TEXT	SEGMENT
_BitmapMemorySize$ = -8					; size = 4
_Buffer$ = 8						; size = 4
_Width$ = 12						; size = 4
_Height$ = 16						; size = 4
?Win32ResizeDIBSection@@YAXPAUwin32_offscreen_buffer@@HH@Z PROC ; Win32ResizeDIBSection, COMDAT

; 58   : internal void Win32ResizeDIBSection(win32_offscreen_buffer *Buffer, int Width, int Height) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 59   : 	if (Buffer->Memory) {

  0001e	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00021	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00025	74 1d		 je	 SHORT $LN2@Win32Resiz

; 60   : 		VirtualFree(Buffer->Memory,0,MEM_RELEASE);

  00027	8b f4		 mov	 esi, esp
  00029	68 00 80 00 00	 push	 32768			; 00008000H
  0002e	6a 00		 push	 0
  00030	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00033	8b 48 2c	 mov	 ecx, DWORD PTR [eax+44]
  00036	51		 push	 ecx
  00037	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFree@12
  0003d	3b f4		 cmp	 esi, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@Win32Resiz:

; 61   : 	}
; 62   : 	Buffer->Width = Width;

  00044	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00047	8b 4d 0c	 mov	 ecx, DWORD PTR _Width$[ebp]
  0004a	89 48 34	 mov	 DWORD PTR [eax+52], ecx

; 63   : 	Buffer->Height = Height;

  0004d	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00050	8b 4d 10	 mov	 ecx, DWORD PTR _Height$[ebp]
  00053	89 48 38	 mov	 DWORD PTR [eax+56], ecx

; 64   : 	Buffer->BytesPerPixel = 4;

  00056	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00059	c7 40 30 04 00
	00 00		 mov	 DWORD PTR [eax+48], 4

; 65   : 	Buffer->Info.bmiHeader.biSize = sizeof(Buffer->Info.bmiHeader);

  00060	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00063	c7 00 28 00 00
	00		 mov	 DWORD PTR [eax], 40	; 00000028H

; 66   : 	Buffer->Info.bmiHeader.biWidth = Buffer->Width;

  00069	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  0006c	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  0006f	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00072	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 67   : 	Buffer->Info.bmiHeader.biHeight = -Buffer->Height;

  00075	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  00078	8b 48 38	 mov	 ecx, DWORD PTR [eax+56]
  0007b	f7 d9		 neg	 ecx
  0007d	8b 55 08	 mov	 edx, DWORD PTR _Buffer$[ebp]
  00080	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 68   : 	Buffer->Info.bmiHeader.biPlanes = 1;

  00083	b8 01 00 00 00	 mov	 eax, 1
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  0008b	66 89 41 0c	 mov	 WORD PTR [ecx+12], ax

; 69   : 	Buffer->Info.bmiHeader.biBitCount = 32;

  0008f	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00094	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  00097	66 89 41 0e	 mov	 WORD PTR [ecx+14], ax

; 70   : 	Buffer->Info.bmiHeader.biCompression = BI_RGB;

  0009b	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  0009e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0

; 71   : 
; 72   : 	int BitmapMemorySize = (Buffer->Width*Buffer->Height)*Buffer->BytesPerPixel;

  000a5	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  000a8	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  000ab	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  000ae	0f af 51 38	 imul	 edx, DWORD PTR [ecx+56]
  000b2	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  000b5	0f af 50 30	 imul	 edx, DWORD PTR [eax+48]
  000b9	89 55 f8	 mov	 DWORD PTR _BitmapMemorySize$[ebp], edx

; 73   : 	Buffer->Memory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  000bc	8b f4		 mov	 esi, esp
  000be	6a 04		 push	 4
  000c0	68 00 10 00 00	 push	 4096			; 00001000H
  000c5	8b 45 f8	 mov	 eax, DWORD PTR _BitmapMemorySize$[ebp]
  000c8	50		 push	 eax
  000c9	6a 00		 push	 0
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  000db	89 41 2c	 mov	 DWORD PTR [ecx+44], eax

; 74   : 	Buffer->Pitch = Buffer->Width*Buffer->BytesPerPixel;

  000de	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  000e1	8b 4d 08	 mov	 ecx, DWORD PTR _Buffer$[ebp]
  000e4	8b 50 34	 mov	 edx, DWORD PTR [eax+52]
  000e7	0f af 51 30	 imul	 edx, DWORD PTR [ecx+48]
  000eb	8b 45 08	 mov	 eax, DWORD PTR _Buffer$[ebp]
  000ee	89 50 3c	 mov	 DWORD PTR [eax+60], edx

; 75   : }

  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5b		 pop	 ebx
  000f4	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000fa	3b ec		 cmp	 ebp, esp
  000fc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00101	8b e5		 mov	 esp, ebp
  00103	5d		 pop	 ebp
  00104	c3		 ret	 0
?Win32ResizeDIBSection@@YAXPAUwin32_offscreen_buffer@@HH@Z ENDP ; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32RenderGradient@@YAXUwin32_offscreen_buffer@@HH@Z
_TEXT	SEGMENT
_Red$1 = -77						; size = 1
_Green$2 = -65						; size = 1
_Blue$3 = -53						; size = 1
_X$4 = -44						; size = 4
_Pixel$5 = -32						; size = 4
_Y$6 = -20						; size = 4
_Row$ = -8						; size = 4
_Buffer$ = 8						; size = 64
_XOffset$ = 72						; size = 4
_YOffset$ = 76						; size = 4
?Win32RenderGradient@@YAXUwin32_offscreen_buffer@@HH@Z PROC ; Win32RenderGradient, COMDAT

; 44   : internal void Win32RenderGradient(win32_offscreen_buffer Buffer, int XOffset, int YOffset) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 45   : 	uint8 *Row = (uint8 *)Buffer.Memory;

  0001e	8b 45 34	 mov	 eax, DWORD PTR _Buffer$[ebp+44]
  00021	89 45 f8	 mov	 DWORD PTR _Row$[ebp], eax

; 46   : 	for (int Y = 0; Y < Buffer.Height; ++Y) {

  00024	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _Y$6[ebp], 0
  0002b	eb 09		 jmp	 SHORT $LN4@Win32Rende
$LN2@Win32Rende:
  0002d	8b 45 ec	 mov	 eax, DWORD PTR _Y$6[ebp]
  00030	83 c0 01	 add	 eax, 1
  00033	89 45 ec	 mov	 DWORD PTR _Y$6[ebp], eax
$LN4@Win32Rende:
  00036	8b 45 ec	 mov	 eax, DWORD PTR _Y$6[ebp]
  00039	3b 45 40	 cmp	 eax, DWORD PTR _Buffer$[ebp+56]
  0003c	7d 6c		 jge	 SHORT $LN1@Win32Rende

; 47   : 		uint32 *Pixel = (uint32 *)Row;

  0003e	8b 45 f8	 mov	 eax, DWORD PTR _Row$[ebp]
  00041	89 45 e0	 mov	 DWORD PTR _Pixel$5[ebp], eax

; 48   : 		for (int X = 0; X < Buffer.Width; ++X) {

  00044	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _X$4[ebp], 0
  0004b	eb 09		 jmp	 SHORT $LN7@Win32Rende
$LN5@Win32Rende:
  0004d	8b 45 d4	 mov	 eax, DWORD PTR _X$4[ebp]
  00050	83 c0 01	 add	 eax, 1
  00053	89 45 d4	 mov	 DWORD PTR _X$4[ebp], eax
$LN7@Win32Rende:
  00056	8b 45 d4	 mov	 eax, DWORD PTR _X$4[ebp]
  00059	3b 45 3c	 cmp	 eax, DWORD PTR _Buffer$[ebp+52]
  0005c	7d 41		 jge	 SHORT $LN6@Win32Rende

; 49   : 			uint8 Blue = (X + XOffset);

  0005e	8b 45 d4	 mov	 eax, DWORD PTR _X$4[ebp]
  00061	03 45 48	 add	 eax, DWORD PTR _XOffset$[ebp]
  00064	88 45 cb	 mov	 BYTE PTR _Blue$3[ebp], al

; 50   : 			uint8 Green = (Y + YOffset);

  00067	8b 45 ec	 mov	 eax, DWORD PTR _Y$6[ebp]
  0006a	03 45 4c	 add	 eax, DWORD PTR _YOffset$[ebp]
  0006d	88 45 bf	 mov	 BYTE PTR _Green$2[ebp], al

; 51   : 			uint8 Red = (X + XOffset);

  00070	8b 45 d4	 mov	 eax, DWORD PTR _X$4[ebp]
  00073	03 45 48	 add	 eax, DWORD PTR _XOffset$[ebp]
  00076	88 45 b3	 mov	 BYTE PTR _Red$1[ebp], al

; 52   : 			*Pixel++ = ((Red << 16) | (Green << 8) | (Blue));

  00079	0f b6 45 b3	 movzx	 eax, BYTE PTR _Red$1[ebp]
  0007d	c1 e0 10	 shl	 eax, 16			; 00000010H
  00080	0f b6 4d bf	 movzx	 ecx, BYTE PTR _Green$2[ebp]
  00084	c1 e1 08	 shl	 ecx, 8
  00087	0b c1		 or	 eax, ecx
  00089	0f b6 55 cb	 movzx	 edx, BYTE PTR _Blue$3[ebp]
  0008d	0b c2		 or	 eax, edx
  0008f	8b 4d e0	 mov	 ecx, DWORD PTR _Pixel$5[ebp]
  00092	89 01		 mov	 DWORD PTR [ecx], eax
  00094	8b 55 e0	 mov	 edx, DWORD PTR _Pixel$5[ebp]
  00097	83 c2 04	 add	 edx, 4
  0009a	89 55 e0	 mov	 DWORD PTR _Pixel$5[ebp], edx

; 53   : 		}

  0009d	eb ae		 jmp	 SHORT $LN5@Win32Rende
$LN6@Win32Rende:

; 54   : 		Row += Buffer.Pitch;

  0009f	8b 45 f8	 mov	 eax, DWORD PTR _Row$[ebp]
  000a2	03 45 44	 add	 eax, DWORD PTR _Buffer$[ebp+60]
  000a5	89 45 f8	 mov	 DWORD PTR _Row$[ebp], eax

; 55   : 	}

  000a8	eb 83		 jmp	 SHORT $LN2@Win32Rende
$LN1@Win32Rende:

; 56   : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?Win32RenderGradient@@YAXUwin32_offscreen_buffer@@HH@Z ENDP ; Win32RenderGradient
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PAUHWND__@@@Z
_TEXT	SEGMENT
_WindowRect$ = -40					; size = 16
_Result$ = -16						; size = 8
__$ArrayPad$ = -4					; size = 4
_WindowHandle$ = 8					; size = 4
?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PAUHWND__@@@Z PROC ; Win32GetWindowDimensions, COMDAT

; 35   : win32_window_dimensions Win32GetWindowDimensions(HWND WindowHandle) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 36   : 	win32_window_dimensions Result;
; 37   : 	RECT WindowRect;
; 38   : 	GetClientRect(WindowHandle, &WindowRect);

  00028	8b f4		 mov	 esi, esp
  0002a	8d 45 d8	 lea	 eax, DWORD PTR _WindowRect$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _WindowHandle$[ebp]
  00031	51		 push	 ecx
  00032	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00038	3b f4		 cmp	 esi, esp
  0003a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 39   : 	Result.Width = WindowRect.right - WindowRect.left;

  0003f	8b 45 e0	 mov	 eax, DWORD PTR _WindowRect$[ebp+8]
  00042	2b 45 d8	 sub	 eax, DWORD PTR _WindowRect$[ebp]
  00045	89 45 f0	 mov	 DWORD PTR _Result$[ebp], eax

; 40   : 	Result.Height = WindowRect.bottom - WindowRect.top;

  00048	8b 45 e4	 mov	 eax, DWORD PTR _WindowRect$[ebp+12]
  0004b	2b 45 dc	 sub	 eax, DWORD PTR _WindowRect$[ebp+4]
  0004e	89 45 f4	 mov	 DWORD PTR _Result$[ebp+4], eax

; 41   : 	return Result;

  00051	8b 45 f0	 mov	 eax, DWORD PTR _Result$[ebp]
  00054	8b 55 f4	 mov	 edx, DWORD PTR _Result$[ebp+4]

; 42   : }

  00057	52		 push	 edx
  00058	8b cd		 mov	 ecx, ebp
  0005a	50		 push	 eax
  0005b	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN6@Win32GetWi
  00061	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00066	58		 pop	 eax
  00067	5a		 pop	 edx
  00068	5f		 pop	 edi
  00069	5e		 pop	 esi
  0006a	5b		 pop	 ebx
  0006b	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0006e	33 cd		 xor	 ecx, ebp
  00070	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00075	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  0007b	3b ec		 cmp	 ebp, esp
  0007d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00082	8b e5		 mov	 esp, ebp
  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
  00086	66 90		 npad	 2
$LN6@Win32GetWi:
  00088	02 00 00 00	 DD	 2
  0008c	00 00 00 00	 DD	 $LN5@Win32GetWi
$LN5@Win32GetWi:
  00090	f0 ff ff ff	 DD	 -16			; fffffff0H
  00094	08 00 00 00	 DD	 8
  00098	00 00 00 00	 DD	 $LN3@Win32GetWi
  0009c	d8 ff ff ff	 DD	 -40			; ffffffd8H
  000a0	10 00 00 00	 DD	 16			; 00000010H
  000a4	00 00 00 00	 DD	 $LN4@Win32GetWi
$LN4@Win32GetWi:
  000a8	57		 DB	 87			; 00000057H
  000a9	69		 DB	 105			; 00000069H
  000aa	6e		 DB	 110			; 0000006eH
  000ab	64		 DB	 100			; 00000064H
  000ac	6f		 DB	 111			; 0000006fH
  000ad	77		 DB	 119			; 00000077H
  000ae	52		 DB	 82			; 00000052H
  000af	65		 DB	 101			; 00000065H
  000b0	63		 DB	 99			; 00000063H
  000b1	74		 DB	 116			; 00000074H
  000b2	00		 DB	 0
$LN3@Win32GetWi:
  000b3	52		 DB	 82			; 00000052H
  000b4	65		 DB	 101			; 00000065H
  000b5	73		 DB	 115			; 00000073H
  000b6	75		 DB	 117			; 00000075H
  000b7	6c		 DB	 108			; 0000006cH
  000b8	74		 DB	 116			; 00000074H
  000b9	00		 DB	 0
?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PAUHWND__@@@Z ENDP ; Win32GetWindowDimensions
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?XInputSetStateStub@@YGKKPAU_XINPUT_VIBRATION@@@Z
_TEXT	SEGMENT
_dwUserIndex$ = 8					; size = 4
_pVibration$ = 12					; size = 4
?XInputSetStateStub@@YGKKPAU_XINPUT_VIBRATION@@@Z PROC	; XInputSetStateStub, COMDAT

; 29   : X_INPUT_SET_STATE(XInputSetStateStub) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 30   : 	return(0);

  0001e	33 c0		 xor	 eax, eax

; 31   : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?XInputSetStateStub@@YGKKPAU_XINPUT_VIBRATION@@@Z ENDP	; XInputSetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?XInputGetStateStub@@YGKKPAU_XINPUT_STATE@@@Z
_TEXT	SEGMENT
_dwUserIndex$ = 8					; size = 4
_pState$ = 12						; size = 4
?XInputGetStateStub@@YGKKPAU_XINPUT_STATE@@@Z PROC	; XInputGetStateStub, COMDAT

; 20   : X_INPUT_GET_STATE(XInputGetStateStub) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 21   : 	return(0);

  0001e	33 c0		 xor	 eax, eax

; 22   : }

  00020	5f		 pop	 edi
  00021	5e		 pop	 esi
  00022	5b		 pop	 ebx
  00023	8b e5		 mov	 esp, ebp
  00025	5d		 pop	 ebp
  00026	c2 08 00	 ret	 8
?XInputGetStateStub@@YGKKPAU_XINPUT_STATE@@@Z ENDP	; XInputGetStateStub
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT _WinMain@16
_TEXT	SEGMENT
tv231 = -589						; size = 1
tv226 = -589						; size = 1
tv189 = -589						; size = 1
tv184 = -589						; size = 1
tv179 = -589						; size = 1
tv174 = -589						; size = 1
tv169 = -589						; size = 1
tv164 = -589						; size = 1
tv159 = -589						; size = 1
tv154 = -589						; size = 1
tv149 = -589						; size = 1
$T1 = -584						; size = 8
_Dimensions$2 = -376					; size = 8
_DeviceContext$3 = -360					; size = 4
_StickY$4 = -348					; size = 2
_StickX$5 = -336					; size = 2
_YButton$6 = -321					; size = 1
_XButton$7 = -309					; size = 1
_BButton$8 = -297					; size = 1
_AButton$9 = -285					; size = 1
_RightShoulder$10 = -273				; size = 1
_LeftShoulder$11 = -261					; size = 1
_Back$12 = -249						; size = 1
_Start$13 = -237					; size = 1
_Right$14 = -225					; size = 1
_Left$15 = -213						; size = 1
_Down$16 = -201						; size = 1
_Up$17 = -189						; size = 1
_Pad$18 = -180						; size = 4
_ControllerState$19 = -168				; size = 16
_ControllerIndex$20 = -144				; size = 4
_dwResult$21 = -132					; size = 4
_Message$22 = -120					; size = 28
_YOffset$23 = -84					; size = 4
_XOffset$24 = -72					; size = 4
_WindowHandle$25 = -60					; size = 4
_WindowClass$ = -48					; size = 40
__$ArrayPad$ = -4					; size = 4
_Instance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_CommandLine$ = 16					; size = 4
_ShowCode$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 146  : int CALLBACK WinMain(HINSTANCE Instance, HINSTANCE hPrevInstance, LPSTR CommandLine, int ShowCode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 50 02 00
	00		 sub	 esp, 592		; 00000250H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd b0 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-592]
  00012	b9 94 00 00 00	 mov	 ecx, 148		; 00000094H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 147  : 	WNDCLASS WindowClass = {};

  00028	33 c0		 xor	 eax, eax
  0002a	89 45 d0	 mov	 DWORD PTR _WindowClass$[ebp], eax
  0002d	89 45 d4	 mov	 DWORD PTR _WindowClass$[ebp+4], eax
  00030	89 45 d8	 mov	 DWORD PTR _WindowClass$[ebp+8], eax
  00033	89 45 dc	 mov	 DWORD PTR _WindowClass$[ebp+12], eax
  00036	89 45 e0	 mov	 DWORD PTR _WindowClass$[ebp+16], eax
  00039	89 45 e4	 mov	 DWORD PTR _WindowClass$[ebp+20], eax
  0003c	89 45 e8	 mov	 DWORD PTR _WindowClass$[ebp+24], eax
  0003f	89 45 ec	 mov	 DWORD PTR _WindowClass$[ebp+28], eax
  00042	89 45 f0	 mov	 DWORD PTR _WindowClass$[ebp+32], eax
  00045	89 45 f4	 mov	 DWORD PTR _WindowClass$[ebp+36], eax

; 148  : 	Win32ResizeDIBSection(&GlobalBackBuffer, 1280, 720);

  00048	68 d0 02 00 00	 push	 720			; 000002d0H
  0004d	68 00 05 00 00	 push	 1280			; 00000500H
  00052	68 00 00 00 00	 push	 OFFSET ?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  00057	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXPAUwin32_offscreen_buffer@@HH@Z ; Win32ResizeDIBSection
  0005c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 149  : 	WindowClass.style = CS_HREDRAW|CS_VREDRAW;

  0005f	c7 45 d0 03 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp], 3

; 150  : 	WindowClass.lpfnWndProc = Win32MainWindowCallback;

  00066	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp+4], OFFSET ?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z ; Win32MainWindowCallback

; 151  : 	WindowClass.hInstance = Instance;

  0006d	8b 45 08	 mov	 eax, DWORD PTR _Instance$[ebp]
  00070	89 45 e0	 mov	 DWORD PTR _WindowClass$[ebp+16], eax

; 152  : 	//WindowClass.hIcon = ;
; 153  : 	//WindowClass.hCursor = ;
; 154  : 	WindowClass.lpszClassName = "hmhWindowClass";

  00073	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp+36], OFFSET ??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@

; 155  : 	if (RegisterClass(&WindowClass))

  0007a	8b f4		 mov	 esi, esp
  0007c	8d 45 d0	 lea	 eax, DWORD PTR _WindowClass$[ebp]
  0007f	50		 push	 eax
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	0f b7 c8	 movzx	 ecx, ax
  00090	85 c9		 test	 ecx, ecx
  00092	0f 84 24 04 00
	00		 je	 $LN10@WinMain

; 156  : 	{
; 157  : 		HWND WindowHandle = CreateWindowEx(

  00098	8b f4		 mov	 esi, esp
  0009a	6a 00		 push	 0
  0009c	8b 45 08	 mov	 eax, DWORD PTR _Instance$[ebp]
  0009f	50		 push	 eax
  000a0	6a 00		 push	 0
  000a2	6a 00		 push	 0
  000a4	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000a9	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000ae	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000b3	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000b8	68 00 00 cf 10	 push	 282001408		; 10cf0000H
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR _WindowClass$[ebp+36]
  000c5	51		 push	 ecx
  000c6	6a 00		 push	 0
  000c8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  000ce	3b f4		 cmp	 esi, esp
  000d0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d5	89 45 c4	 mov	 DWORD PTR _WindowHandle$25[ebp], eax

; 158  : 			0,
; 159  : 			WindowClass.lpszClassName,
; 160  : 			"Handmade Hero v0.1",
; 161  : 			WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 162  : 			CW_USEDEFAULT,
; 163  : 			CW_USEDEFAULT,
; 164  : 			CW_USEDEFAULT,
; 165  : 			CW_USEDEFAULT,
; 166  : 			0,
; 167  : 			0,
; 168  : 			Instance,
; 169  : 			0);
; 170  : 		if (WindowHandle)

  000d8	83 7d c4 00	 cmp	 DWORD PTR _WindowHandle$25[ebp], 0
  000dc	0f 84 da 03 00
	00		 je	 $LN10@WinMain

; 171  : 		{
; 172  : 			int XOffset = 0;

  000e2	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _XOffset$24[ebp], 0

; 173  : 			int YOffset = 0;

  000e9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _YOffset$23[ebp], 0

; 174  : 			GlobalRunning = true;

  000f0	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 1
$LN2@WinMain:

; 175  : 			while(GlobalRunning)

  000f7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?GlobalRunning@@3_NA
  000fe	85 c0		 test	 eax, eax
  00100	0f 84 b6 03 00
	00		 je	 $LN10@WinMain
$LN4@WinMain:

; 176  : 			{
; 177  : 				MSG Message;
; 178  : 				while (PeekMessage(&Message, 0, 0, 0, PM_REMOVE)) {

  00106	8b f4		 mov	 esi, esp
  00108	6a 01		 push	 1
  0010a	6a 00		 push	 0
  0010c	6a 00		 push	 0
  0010e	6a 00		 push	 0
  00110	8d 45 88	 lea	 eax, DWORD PTR _Message$22[ebp]
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__PeekMessageA@20
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00121	85 c0		 test	 eax, eax
  00123	74 35		 je	 SHORT $LN5@WinMain

; 179  : 					if (Message.message == WM_QUIT) {

  00125	83 7d 8c 12	 cmp	 DWORD PTR _Message$22[ebp+4], 18 ; 00000012H
  00129	75 07		 jne	 SHORT $LN13@WinMain

; 180  : 						GlobalRunning = false;

  0012b	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?GlobalRunning@@3_NA, 0
$LN13@WinMain:

; 181  : 					}
; 182  : 					TranslateMessage(&Message);

  00132	8b f4		 mov	 esi, esp
  00134	8d 45 88	 lea	 eax, DWORD PTR _Message$22[ebp]
  00137	50		 push	 eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMessage@4
  0013e	3b f4		 cmp	 esi, esp
  00140	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  : 					DispatchMessage(&Message);

  00145	8b f4		 mov	 esi, esp
  00147	8d 45 88	 lea	 eax, DWORD PTR _Message$22[ebp]
  0014a	50		 push	 eax
  0014b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4
  00151	3b f4		 cmp	 esi, esp
  00153	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 184  : 				}

  00158	eb ac		 jmp	 SHORT $LN4@WinMain
$LN5@WinMain:

; 185  : 				DWORD dwResult;
; 186  : 				for (DWORD ControllerIndex = 0; ControllerIndex< XUSER_MAX_COUNT; ++ControllerIndex) {

  0015a	c7 85 70 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _ControllerIndex$20[ebp], 0
  00164	eb 0f		 jmp	 SHORT $LN8@WinMain
$LN6@WinMain:
  00166	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _ControllerIndex$20[ebp]
  0016c	83 c0 01	 add	 eax, 1
  0016f	89 85 70 ff ff
	ff		 mov	 DWORD PTR _ControllerIndex$20[ebp], eax
$LN8@WinMain:
  00175	83 bd 70 ff ff
	ff 04		 cmp	 DWORD PTR _ControllerIndex$20[ebp], 4
  0017c	0f 83 68 02 00
	00		 jae	 $LN7@WinMain

; 187  : 					XINPUT_STATE ControllerState;
; 188  : 					ZeroMemory(&ControllerState, sizeof(XINPUT_STATE));

  00182	6a 10		 push	 16			; 00000010H
  00184	6a 00		 push	 0
  00186	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ControllerState$19[ebp]
  0018c	50		 push	 eax
  0018d	e8 00 00 00 00	 call	 _memset
  00192	83 c4 0c	 add	 esp, 12			; 0000000cH

; 189  : 
; 190  : 					// Simply get the state of the controller from XInput.
; 191  : 					dwResult = XInputGetState(ControllerIndex, &ControllerState);

  00195	8b f4		 mov	 esi, esp
  00197	8d 85 58 ff ff
	ff		 lea	 eax, DWORD PTR _ControllerState$19[ebp]
  0019d	50		 push	 eax
  0019e	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR _ControllerIndex$20[ebp]
  001a4	51		 push	 ecx
  001a5	ff 15 00 00 00
	00		 call	 DWORD PTR ?XInputGetState_@@3P6GKKPAU_XINPUT_STATE@@@ZA
  001ab	3b f4		 cmp	 esi, esp
  001ad	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b2	89 85 7c ff ff
	ff		 mov	 DWORD PTR _dwResult$21[ebp], eax

; 192  : 
; 193  : 					if (dwResult == ERROR_SUCCESS)

  001b8	83 bd 7c ff ff
	ff 00		 cmp	 DWORD PTR _dwResult$21[ebp], 0
  001bf	0f 85 20 02 00
	00		 jne	 $LN15@WinMain

; 194  : 					{
; 195  : 						// Controller is connected 
; 196  : 						XINPUT_GAMEPAD *Pad = &ControllerState.Gamepad;

  001c5	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _ControllerState$19[ebp+4]
  001cb	89 85 4c ff ff
	ff		 mov	 DWORD PTR _Pad$18[ebp], eax

; 197  : 						bool Up = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_UP);

  001d1	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  001d7	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001da	83 e1 01	 and	 ecx, 1
  001dd	88 8d 43 ff ff
	ff		 mov	 BYTE PTR _Up$17[ebp], cl

; 198  : 						bool Down = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_DOWN);

  001e3	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  001e9	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  001ec	83 e1 02	 and	 ecx, 2
  001ef	74 09		 je	 SHORT $LN18@WinMain
  001f1	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv149[ebp], 1
  001f8	eb 07		 jmp	 SHORT $LN19@WinMain
$LN18@WinMain:
  001fa	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv149[ebp], 0
$LN19@WinMain:
  00201	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv149[ebp]
  00207	88 95 37 ff ff
	ff		 mov	 BYTE PTR _Down$16[ebp], dl

; 199  : 						bool Left = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_LEFT);

  0020d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  00213	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00216	83 e1 04	 and	 ecx, 4
  00219	74 09		 je	 SHORT $LN20@WinMain
  0021b	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv154[ebp], 1
  00222	eb 07		 jmp	 SHORT $LN21@WinMain
$LN20@WinMain:
  00224	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv154[ebp], 0
$LN21@WinMain:
  0022b	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv154[ebp]
  00231	88 95 2b ff ff
	ff		 mov	 BYTE PTR _Left$15[ebp], dl

; 200  : 						bool Right = (Pad->wButtons & XINPUT_GAMEPAD_DPAD_RIGHT);

  00237	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  0023d	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00240	83 e1 08	 and	 ecx, 8
  00243	74 09		 je	 SHORT $LN22@WinMain
  00245	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv159[ebp], 1
  0024c	eb 07		 jmp	 SHORT $LN23@WinMain
$LN22@WinMain:
  0024e	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv159[ebp], 0
$LN23@WinMain:
  00255	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv159[ebp]
  0025b	88 95 1f ff ff
	ff		 mov	 BYTE PTR _Right$14[ebp], dl

; 201  : 						bool Start = (Pad->wButtons & XINPUT_GAMEPAD_START);

  00261	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  00267	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0026a	83 e1 10	 and	 ecx, 16			; 00000010H
  0026d	74 09		 je	 SHORT $LN24@WinMain
  0026f	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv164[ebp], 1
  00276	eb 07		 jmp	 SHORT $LN25@WinMain
$LN24@WinMain:
  00278	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv164[ebp], 0
$LN25@WinMain:
  0027f	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv164[ebp]
  00285	88 95 13 ff ff
	ff		 mov	 BYTE PTR _Start$13[ebp], dl

; 202  : 						bool Back = (Pad->wButtons & XINPUT_GAMEPAD_BACK);

  0028b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  00291	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00294	83 e1 20	 and	 ecx, 32			; 00000020H
  00297	74 09		 je	 SHORT $LN26@WinMain
  00299	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv169[ebp], 1
  002a0	eb 07		 jmp	 SHORT $LN27@WinMain
$LN26@WinMain:
  002a2	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv169[ebp], 0
$LN27@WinMain:
  002a9	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv169[ebp]
  002af	88 95 07 ff ff
	ff		 mov	 BYTE PTR _Back$12[ebp], dl

; 203  : 						bool LeftShoulder = (Pad->wButtons & XINPUT_GAMEPAD_LEFT_SHOULDER);

  002b5	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  002bb	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002be	81 e1 00 01 00
	00		 and	 ecx, 256		; 00000100H
  002c4	74 09		 je	 SHORT $LN28@WinMain
  002c6	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv174[ebp], 1
  002cd	eb 07		 jmp	 SHORT $LN29@WinMain
$LN28@WinMain:
  002cf	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv174[ebp], 0
$LN29@WinMain:
  002d6	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv174[ebp]
  002dc	88 95 fb fe ff
	ff		 mov	 BYTE PTR _LeftShoulder$11[ebp], dl

; 204  : 						bool RightShoulder = (Pad->wButtons & XINPUT_GAMEPAD_RIGHT_SHOULDER);

  002e2	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  002e8	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  002eb	81 e1 00 02 00
	00		 and	 ecx, 512		; 00000200H
  002f1	74 09		 je	 SHORT $LN30@WinMain
  002f3	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv179[ebp], 1
  002fa	eb 07		 jmp	 SHORT $LN31@WinMain
$LN30@WinMain:
  002fc	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv179[ebp], 0
$LN31@WinMain:
  00303	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv179[ebp]
  00309	88 95 ef fe ff
	ff		 mov	 BYTE PTR _RightShoulder$10[ebp], dl

; 205  : 						bool AButton = (Pad->wButtons & XINPUT_GAMEPAD_A);

  0030f	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  00315	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00318	81 e1 00 10 00
	00		 and	 ecx, 4096		; 00001000H
  0031e	74 09		 je	 SHORT $LN32@WinMain
  00320	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv184[ebp], 1
  00327	eb 07		 jmp	 SHORT $LN33@WinMain
$LN32@WinMain:
  00329	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv184[ebp], 0
$LN33@WinMain:
  00330	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv184[ebp]
  00336	88 95 e3 fe ff
	ff		 mov	 BYTE PTR _AButton$9[ebp], dl

; 206  : 						bool BButton = (Pad->wButtons & XINPUT_GAMEPAD_B);

  0033c	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  00342	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00345	81 e1 00 20 00
	00		 and	 ecx, 8192		; 00002000H
  0034b	74 09		 je	 SHORT $LN34@WinMain
  0034d	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv189[ebp], 1
  00354	eb 07		 jmp	 SHORT $LN35@WinMain
$LN34@WinMain:
  00356	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv189[ebp], 0
$LN35@WinMain:
  0035d	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv189[ebp]
  00363	88 95 d7 fe ff
	ff		 mov	 BYTE PTR _BButton$8[ebp], dl

; 207  : 						bool XButton = (Pad->wButtons & XINPUT_GAMEPAD_X);

  00369	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  0036f	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  00372	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  00378	74 09		 je	 SHORT $LN36@WinMain
  0037a	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv226[ebp], 1
  00381	eb 07		 jmp	 SHORT $LN37@WinMain
$LN36@WinMain:
  00383	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv226[ebp], 0
$LN37@WinMain:
  0038a	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv226[ebp]
  00390	88 95 cb fe ff
	ff		 mov	 BYTE PTR _XButton$7[ebp], dl

; 208  : 						bool YButton = (Pad->wButtons & XINPUT_GAMEPAD_Y);

  00396	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  0039c	0f b7 08	 movzx	 ecx, WORD PTR [eax]
  0039f	81 e1 00 80 00
	00		 and	 ecx, 32768		; 00008000H
  003a5	74 09		 je	 SHORT $LN38@WinMain
  003a7	c6 85 b3 fd ff
	ff 01		 mov	 BYTE PTR tv231[ebp], 1
  003ae	eb 07		 jmp	 SHORT $LN39@WinMain
$LN38@WinMain:
  003b0	c6 85 b3 fd ff
	ff 00		 mov	 BYTE PTR tv231[ebp], 0
$LN39@WinMain:
  003b7	8a 95 b3 fd ff
	ff		 mov	 dl, BYTE PTR tv231[ebp]
  003bd	88 95 bf fe ff
	ff		 mov	 BYTE PTR _YButton$6[ebp], dl

; 209  : 						int16 StickX = Pad->sThumbLX;

  003c3	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  003c9	66 8b 48 04	 mov	 cx, WORD PTR [eax+4]
  003cd	66 89 8d b0 fe
	ff ff		 mov	 WORD PTR _StickX$5[ebp], cx

; 210  : 						int16 StickY = Pad->sThumbLY;

  003d4	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _Pad$18[ebp]
  003da	66 8b 48 06	 mov	 cx, WORD PTR [eax+6]
  003de	66 89 8d a4 fe
	ff ff		 mov	 WORD PTR _StickY$4[ebp], cx
$LN15@WinMain:

; 211  : 					}
; 212  : 					else
; 213  : 					{
; 214  : 						// Controller is not connected 
; 215  : 					}
; 216  : 				}

  003e5	e9 7c fd ff ff	 jmp	 $LN6@WinMain
$LN7@WinMain:

; 217  : 
; 218  : 				Win32RenderGradient(GlobalBackBuffer, XOffset, YOffset);

  003ea	8b 45 ac	 mov	 eax, DWORD PTR _YOffset$23[ebp]
  003ed	50		 push	 eax
  003ee	8b 4d b8	 mov	 ecx, DWORD PTR _XOffset$24[ebp]
  003f1	51		 push	 ecx
  003f2	83 ec 40	 sub	 esp, 64			; 00000040H
  003f5	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  003fa	be 00 00 00 00	 mov	 esi, OFFSET ?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  003ff	8b fc		 mov	 edi, esp
  00401	f3 a5		 rep movsd
  00403	e8 00 00 00 00	 call	 ?Win32RenderGradient@@YAXUwin32_offscreen_buffer@@HH@Z ; Win32RenderGradient
  00408	83 c4 48	 add	 esp, 72			; 00000048H

; 219  : 				
; 220  : 				HDC DeviceContext = GetDC(WindowHandle);

  0040b	8b f4		 mov	 esi, esp
  0040d	8b 45 c4	 mov	 eax, DWORD PTR _WindowHandle$25[ebp]
  00410	50		 push	 eax
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4
  00417	3b f4		 cmp	 esi, esp
  00419	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0041e	89 85 98 fe ff
	ff		 mov	 DWORD PTR _DeviceContext$3[ebp], eax

; 221  : 				win32_window_dimensions Dimensions = Win32GetWindowDimensions(WindowHandle);

  00424	8b 45 c4	 mov	 eax, DWORD PTR _WindowHandle$25[ebp]
  00427	50		 push	 eax
  00428	e8 00 00 00 00	 call	 ?Win32GetWindowDimensions@@YA?AUwin32_window_dimensions@@PAUHWND__@@@Z ; Win32GetWindowDimensions
  0042d	83 c4 04	 add	 esp, 4
  00430	89 85 b8 fd ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  00436	89 95 bc fd ff
	ff		 mov	 DWORD PTR $T1[ebp+4], edx
  0043c	8b 8d b8 fd ff
	ff		 mov	 ecx, DWORD PTR $T1[ebp]
  00442	89 8d 88 fe ff
	ff		 mov	 DWORD PTR _Dimensions$2[ebp], ecx
  00448	8b 95 bc fd ff
	ff		 mov	 edx, DWORD PTR $T1[ebp+4]
  0044e	89 95 8c fe ff
	ff		 mov	 DWORD PTR _Dimensions$2[ebp+4], edx

; 222  : 				Win32DisplayBufferInWindow(DeviceContext, Dimensions.Width, Dimensions.Height, GlobalBackBuffer, 0, 0, Dimensions.Width, Dimensions.Height);

  00454	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _Dimensions$2[ebp+4]
  0045a	50		 push	 eax
  0045b	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR _Dimensions$2[ebp]
  00461	51		 push	 ecx
  00462	6a 00		 push	 0
  00464	6a 00		 push	 0
  00466	83 ec 40	 sub	 esp, 64			; 00000040H
  00469	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0046e	be 00 00 00 00	 mov	 esi, OFFSET ?GlobalBackBuffer@@3Uwin32_offscreen_buffer@@A
  00473	8b fc		 mov	 edi, esp
  00475	f3 a5		 rep movsd
  00477	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR _Dimensions$2[ebp+4]
  0047d	52		 push	 edx
  0047e	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR _Dimensions$2[ebp]
  00484	50		 push	 eax
  00485	8b 8d 98 fe ff
	ff		 mov	 ecx, DWORD PTR _DeviceContext$3[ebp]
  0048b	51		 push	 ecx
  0048c	e8 00 00 00 00	 call	 ?Win32DisplayBufferInWindow@@YAXPAUHDC__@@HHUwin32_offscreen_buffer@@HHHH@Z ; Win32DisplayBufferInWindow
  00491	83 c4 5c	 add	 esp, 92			; 0000005cH

; 223  : 				ReleaseDC(WindowHandle, DeviceContext);

  00494	8b f4		 mov	 esi, esp
  00496	8b 85 98 fe ff
	ff		 mov	 eax, DWORD PTR _DeviceContext$3[ebp]
  0049c	50		 push	 eax
  0049d	8b 4d c4	 mov	 ecx, DWORD PTR _WindowHandle$25[ebp]
  004a0	51		 push	 ecx
  004a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
  004a7	3b f4		 cmp	 esi, esp
  004a9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 224  : 				++XOffset;

  004ae	8b 45 b8	 mov	 eax, DWORD PTR _XOffset$24[ebp]
  004b1	83 c0 01	 add	 eax, 1
  004b4	89 45 b8	 mov	 DWORD PTR _XOffset$24[ebp], eax

; 225  : 			}

  004b7	e9 3b fc ff ff	 jmp	 $LN2@WinMain
$LN10@WinMain:

; 226  : 			
; 227  : 		}
; 228  : 		else
; 229  : 		{
; 230  : 			//TODO(smzb): Log this event
; 231  : 		}
; 232  : 	}
; 233  : 	else {
; 234  : 		//TODO(smzb): log this event
; 235  : 	}
; 236  : 	if (Debug) { MessageBox(0, "This is Handmade Hero", "Handmade Hero v0.1", MB_OK | MB_ICONINFORMATION); }

  004bc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Debug@@3_NA
  004c3	85 c0		 test	 eax, eax
  004c5	74 1d		 je	 SHORT $LN16@WinMain
  004c7	8b f4		 mov	 esi, esp
  004c9	6a 40		 push	 64			; 00000040H
  004cb	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
  004d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@
  004d5	6a 00		 push	 0
  004d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  004dd	3b f4		 cmp	 esi, esp
  004df	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN16@WinMain:

; 237  : 	return 0;

  004e4	33 c0		 xor	 eax, eax

; 238  : }

  004e6	52		 push	 edx
  004e7	8b cd		 mov	 ecx, ebp
  004e9	50		 push	 eax
  004ea	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN45@WinMain
  004f0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004f5	58		 pop	 eax
  004f6	5a		 pop	 edx
  004f7	5f		 pop	 edi
  004f8	5e		 pop	 esi
  004f9	5b		 pop	 ebx
  004fa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004fd	33 cd		 xor	 ecx, ebp
  004ff	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00504	81 c4 50 02 00
	00		 add	 esp, 592		; 00000250H
  0050a	3b ec		 cmp	 ebp, esp
  0050c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00511	8b e5		 mov	 esp, ebp
  00513	5d		 pop	 ebp
  00514	c2 10 00	 ret	 16			; 00000010H
  00517	90		 npad	 1
$LN45@WinMain:
  00518	04 00 00 00	 DD	 4
  0051c	00 00 00 00	 DD	 $LN44@WinMain
$LN44@WinMain:
  00520	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00524	28 00 00 00	 DD	 40			; 00000028H
  00528	00 00 00 00	 DD	 $LN40@WinMain
  0052c	88 ff ff ff	 DD	 -120			; ffffff88H
  00530	1c 00 00 00	 DD	 28			; 0000001cH
  00534	00 00 00 00	 DD	 $LN41@WinMain
  00538	58 ff ff ff	 DD	 -168			; ffffff58H
  0053c	10 00 00 00	 DD	 16			; 00000010H
  00540	00 00 00 00	 DD	 $LN42@WinMain
  00544	88 fe ff ff	 DD	 -376			; fffffe88H
  00548	08 00 00 00	 DD	 8
  0054c	00 00 00 00	 DD	 $LN43@WinMain
$LN43@WinMain:
  00550	44		 DB	 68			; 00000044H
  00551	69		 DB	 105			; 00000069H
  00552	6d		 DB	 109			; 0000006dH
  00553	65		 DB	 101			; 00000065H
  00554	6e		 DB	 110			; 0000006eH
  00555	73		 DB	 115			; 00000073H
  00556	69		 DB	 105			; 00000069H
  00557	6f		 DB	 111			; 0000006fH
  00558	6e		 DB	 110			; 0000006eH
  00559	73		 DB	 115			; 00000073H
  0055a	00		 DB	 0
$LN42@WinMain:
  0055b	43		 DB	 67			; 00000043H
  0055c	6f		 DB	 111			; 0000006fH
  0055d	6e		 DB	 110			; 0000006eH
  0055e	74		 DB	 116			; 00000074H
  0055f	72		 DB	 114			; 00000072H
  00560	6f		 DB	 111			; 0000006fH
  00561	6c		 DB	 108			; 0000006cH
  00562	6c		 DB	 108			; 0000006cH
  00563	65		 DB	 101			; 00000065H
  00564	72		 DB	 114			; 00000072H
  00565	53		 DB	 83			; 00000053H
  00566	74		 DB	 116			; 00000074H
  00567	61		 DB	 97			; 00000061H
  00568	74		 DB	 116			; 00000074H
  00569	65		 DB	 101			; 00000065H
  0056a	00		 DB	 0
$LN41@WinMain:
  0056b	4d		 DB	 77			; 0000004dH
  0056c	65		 DB	 101			; 00000065H
  0056d	73		 DB	 115			; 00000073H
  0056e	73		 DB	 115			; 00000073H
  0056f	61		 DB	 97			; 00000061H
  00570	67		 DB	 103			; 00000067H
  00571	65		 DB	 101			; 00000065H
  00572	00		 DB	 0
$LN40@WinMain:
  00573	57		 DB	 87			; 00000057H
  00574	69		 DB	 105			; 00000069H
  00575	6e		 DB	 110			; 0000006eH
  00576	64		 DB	 100			; 00000064H
  00577	6f		 DB	 111			; 0000006fH
  00578	77		 DB	 119			; 00000077H
  00579	43		 DB	 67			; 00000043H
  0057a	6c		 DB	 108			; 0000006cH
  0057b	61		 DB	 97			; 00000061H
  0057c	73		 DB	 115			; 00000073H
  0057d	73		 DB	 115			; 00000073H
  0057e	00		 DB	 0
_WinMain@16 ENDP
_TEXT	ENDS
END
