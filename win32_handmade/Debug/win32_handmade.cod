; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24215.1 

	TITLE	C:\Users\mitoskalandiel\Documents\Visual Studio 2015\Projects\hmh\win32_handmade\win32_handmade.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_WinMain@16
PUBLIC	?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z	; Win32MainWindowCallback
PUBLIC	??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@		; `string'
PUBLIC	??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@		; `string'
PUBLIC	??_C@_08CIKHGLDE@WM_QUIT?6?$AA@			; `string'
PUBLIC	??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@	; `string'
PUBLIC	??_C@_09LMMFEECM@WM_PAINT?6?$AA@		; `string'
PUBLIC	??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@		; `string'
PUBLIC	??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@	; `string'
PUBLIC	??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@ ; `string'
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp__VirtualAlloc@16:PROC
EXTRN	__imp__VirtualFree@12:PROC
EXTRN	__imp__StretchDIBits@52:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__MessageBoxA@16:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
?Running@@3_NA DB 01H DUP (?)				; Running
	ALIGN	4

?BitmapInfo@@3UtagBITMAPINFO@@A DB 02cH DUP (?)		; BitmapInfo
?BitmapMemory@@3PAXA DD 01H DUP (?)			; BitmapMemory
?BitmapWidth@@3HA DD 01H DUP (?)			; BitmapWidth
?BitmapHeight@@3HA DD 01H DUP (?)			; BitmapHeight
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@
CONST	SEGMENT
??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@ DB 'This is Handmade Her'
	DB	'o', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
CONST	SEGMENT
??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@ DB 'Handmade Hero v0.1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@
CONST	SEGMENT
??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@ DB 'hmhWindowClass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LMMFEECM@WM_PAINT?6?$AA@
CONST	SEGMENT
??_C@_09LMMFEECM@WM_PAINT?6?$AA@ DB 'WM_PAINT', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@
CONST	SEGMENT
??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@ DB 'WM_ACTIVATEAPP', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CIKHGLDE@WM_QUIT?6?$AA@
CONST	SEGMENT
??_C@_08CIKHGLDE@WM_QUIT?6?$AA@ DB 'WM_QUIT', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@
CONST	SEGMENT
??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@ DB 'WM_CLOSE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@
CONST	SEGMENT
??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@ DB 'WM_DESTROY', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mitoskalandiel\documents\visual studio 2015\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
tv64 = -416						; size = 4
_ClientRect$1 = -216					; size = 16
_Height$2 = -192					; size = 4
_Width$3 = -180						; size = 4
_Y$4 = -168						; size = 4
_X$5 = -156						; size = 4
_DeviceContext$6 = -144					; size = 4
_Paint$7 = -132						; size = 64
_Height$8 = -60						; size = 4
_Width$9 = -48						; size = 4
_ClientRect$10 = -36					; size = 16
_Result$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_Window$ = 8						; size = 4
_Message$ = 12						; size = 4
_WParam$ = 16						; size = 4
_LParam$ = 20						; size = 4
?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z PROC	; Win32MainWindowCallback, COMDAT

; 65   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec a0 01 00
	00		 sub	 esp, 416		; 000001a0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 60 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-416]
  00012	b9 68 00 00 00	 mov	 ecx, 104		; 00000068H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 66   : 	LRESULT Result = 0;

  00028	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _Result$[ebp], 0

; 67   : 	switch (Message) {

  0002f	8b 45 0c	 mov	 eax, DWORD PTR _Message$[ebp]
  00032	89 85 60 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], eax
  00038	8b 8d 60 fe ff
	ff		 mov	 ecx, DWORD PTR tv64[ebp]
  0003e	83 e9 02	 sub	 ecx, 2
  00041	89 8d 60 fe ff
	ff		 mov	 DWORD PTR tv64[ebp], ecx
  00047	83 bd 60 fe ff
	ff 1a		 cmp	 DWORD PTR tv64[ebp], 26	; 0000001aH
  0004e	0f 87 8a 01 00
	00		 ja	 $LN10@Win32MainW
  00054	8b 95 60 fe ff
	ff		 mov	 edx, DWORD PTR tv64[ebp]
  0005a	0f b6 82 00 00
	00 00		 movzx	 eax, BYTE PTR $LN12@Win32MainW[edx]
  00061	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN18@Win32MainW[eax*4]
$LN4@Win32MainW:

; 68   : 		case WM_SIZE:
; 69   : 		{
; 70   : 			RECT ClientRect;
; 71   : 			GetClientRect(Window,&ClientRect);

  00068	8b f4		 mov	 esi, esp
  0006a	8d 45 dc	 lea	 eax, DWORD PTR _ClientRect$10[ebp]
  0006d	50		 push	 eax
  0006e	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  00071	51		 push	 ecx
  00072	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 72   : 			int Width = ClientRect.right - ClientRect.left;

  0007f	8b 45 e4	 mov	 eax, DWORD PTR _ClientRect$10[ebp+8]
  00082	2b 45 dc	 sub	 eax, DWORD PTR _ClientRect$10[ebp]
  00085	89 45 d0	 mov	 DWORD PTR _Width$9[ebp], eax

; 73   : 			int Height = ClientRect.bottom - ClientRect.top;

  00088	8b 45 e8	 mov	 eax, DWORD PTR _ClientRect$10[ebp+12]
  0008b	2b 45 e0	 sub	 eax, DWORD PTR _ClientRect$10[ebp+4]
  0008e	89 45 c4	 mov	 DWORD PTR _Height$8[ebp], eax

; 74   : 			Win32ResizeDIBSection(Width, Height);

  00091	8b 45 c4	 mov	 eax, DWORD PTR _Height$8[ebp]
  00094	50		 push	 eax
  00095	8b 4d d0	 mov	 ecx, DWORD PTR _Width$9[ebp]
  00098	51		 push	 ecx
  00099	e8 00 00 00 00	 call	 ?Win32ResizeDIBSection@@YAXHH@Z ; Win32ResizeDIBSection
  0009e	83 c4 08	 add	 esp, 8

; 75   : 			//OutputDebugStringA("WM_SIZE\n");
; 76   : 		} break;

  000a1	e9 5a 01 00 00	 jmp	 $LN2@Win32MainW
$LN5@Win32MainW:

; 77   : 		case WM_DESTROY:
; 78   : 		{
; 79   : 			Running = false;

  000a6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 80   : 			OutputDebugStringA("WM_DESTROY\n");

  000ad	8b f4		 mov	 esi, esp
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OGANANAC@WM_DESTROY?6?$AA@
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 81   : 		} break;

  000c1	e9 3a 01 00 00	 jmp	 $LN2@Win32MainW
$LN6@Win32MainW:

; 82   : 		case WM_CLOSE:
; 83   : 		{
; 84   : 			Running = false;

  000c6	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?Running@@3_NA, 0

; 85   : 			OutputDebugStringA("WM_CLOSE\n");

  000cd	8b f4		 mov	 esi, esp
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_09GGLKGCAE@WM_CLOSE?6?$AA@
  000d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000da	3b f4		 cmp	 esi, esp
  000dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 86   : 		} break;

  000e1	e9 1a 01 00 00	 jmp	 $LN2@Win32MainW
$LN7@Win32MainW:

; 87   : 		case WM_QUIT:
; 88   : 		{
; 89   : 			OutputDebugStringA("WM_QUIT\n");

  000e6	8b f4		 mov	 esi, esp
  000e8	68 00 00 00 00	 push	 OFFSET ??_C@_08CIKHGLDE@WM_QUIT?6?$AA@
  000ed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  000f3	3b f4		 cmp	 esi, esp
  000f5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 90   : 		} break;

  000fa	e9 01 01 00 00	 jmp	 $LN2@Win32MainW
$LN8@Win32MainW:

; 91   : 		case WM_ACTIVATEAPP:
; 92   : 		{
; 93   : 			OutputDebugStringA("WM_ACTIVATEAPP\n");

  000ff	8b f4		 mov	 esi, esp
  00101	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIBNEJNG@WM_ACTIVATEAPP?6?$AA@
  00106	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  0010c	3b f4		 cmp	 esi, esp
  0010e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 94   : 		} break;

  00113	e9 e8 00 00 00	 jmp	 $LN2@Win32MainW
$LN9@Win32MainW:

; 95   : 		case WM_PAINT:
; 96   : 		{
; 97   : 			PAINTSTRUCT Paint;
; 98   : 			HDC DeviceContext = BeginPaint(Window, &Paint);

  00118	8b f4		 mov	 esi, esp
  0011a	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _Paint$7[ebp]
  00120	50		 push	 eax
  00121	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  00124	51		 push	 ecx
  00125	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__BeginPaint@8
  0012b	3b f4		 cmp	 esi, esp
  0012d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00132	89 85 70 ff ff
	ff		 mov	 DWORD PTR _DeviceContext$6[ebp], eax

; 99   : 			int X = Paint.rcPaint.left;

  00138	8b 45 84	 mov	 eax, DWORD PTR _Paint$7[ebp+8]
  0013b	89 85 64 ff ff
	ff		 mov	 DWORD PTR _X$5[ebp], eax

; 100  : 			int Y = Paint.rcPaint.top;

  00141	8b 45 88	 mov	 eax, DWORD PTR _Paint$7[ebp+12]
  00144	89 85 58 ff ff
	ff		 mov	 DWORD PTR _Y$4[ebp], eax

; 101  : 			int Width = Paint.rcPaint.right - Paint.rcPaint.left;

  0014a	8b 45 8c	 mov	 eax, DWORD PTR _Paint$7[ebp+16]
  0014d	2b 45 84	 sub	 eax, DWORD PTR _Paint$7[ebp+8]
  00150	89 85 4c ff ff
	ff		 mov	 DWORD PTR _Width$3[ebp], eax

; 102  : 			int Height = Paint.rcPaint.bottom - Paint.rcPaint.top;

  00156	8b 45 90	 mov	 eax, DWORD PTR _Paint$7[ebp+20]
  00159	2b 45 88	 sub	 eax, DWORD PTR _Paint$7[ebp+12]
  0015c	89 85 40 ff ff
	ff		 mov	 DWORD PTR _Height$2[ebp], eax

; 103  : 			RECT ClientRect;
; 104  : 			GetClientRect(Window, &ClientRect);

  00162	8b f4		 mov	 esi, esp
  00164	8d 85 28 ff ff
	ff		 lea	 eax, DWORD PTR _ClientRect$1[ebp]
  0016a	50		 push	 eax
  0016b	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  0016e	51		 push	 ecx
  0016f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8
  00175	3b f4		 cmp	 esi, esp
  00177	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 105  : 			Win32UpdateWindow(DeviceContext, &ClientRect, X, Y, Width, Height);

  0017c	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _Height$2[ebp]
  00182	50		 push	 eax
  00183	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _Width$3[ebp]
  00189	51		 push	 ecx
  0018a	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _Y$4[ebp]
  00190	52		 push	 edx
  00191	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _X$5[ebp]
  00197	50		 push	 eax
  00198	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR _ClientRect$1[ebp]
  0019e	51		 push	 ecx
  0019f	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR _DeviceContext$6[ebp]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 ?Win32UpdateWindow@@YAXPAUHDC__@@PAUtagRECT@@HHHH@Z ; Win32UpdateWindow
  001ab	83 c4 18	 add	 esp, 24			; 00000018H

; 106  : 			EndPaint(Window,&Paint);

  001ae	8b f4		 mov	 esi, esp
  001b0	8d 85 7c ff ff
	ff		 lea	 eax, DWORD PTR _Paint$7[ebp]
  001b6	50		 push	 eax
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _Window$[ebp]
  001ba	51		 push	 ecx
  001bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EndPaint@8
  001c1	3b f4		 cmp	 esi, esp
  001c3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 107  : 			OutputDebugStringA("WM_PAINT\n");

  001c8	8b f4		 mov	 esi, esp
  001ca	68 00 00 00 00	 push	 OFFSET ??_C@_09LMMFEECM@WM_PAINT?6?$AA@
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OutputDebugStringA@4
  001d5	3b f4		 cmp	 esi, esp
  001d7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 108  : 		} break;

  001dc	eb 22		 jmp	 SHORT $LN2@Win32MainW
$LN10@Win32MainW:

; 109  : 		default:
; 110  : 		{
; 111  : 			Result = DefWindowProc(Window,Message,WParam,LParam);

  001de	8b f4		 mov	 esi, esp
  001e0	8b 45 14	 mov	 eax, DWORD PTR _LParam$[ebp]
  001e3	50		 push	 eax
  001e4	8b 4d 10	 mov	 ecx, DWORD PTR _WParam$[ebp]
  001e7	51		 push	 ecx
  001e8	8b 55 0c	 mov	 edx, DWORD PTR _Message$[ebp]
  001eb	52		 push	 edx
  001ec	8b 45 08	 mov	 eax, DWORD PTR _Window$[ebp]
  001ef	50		 push	 eax
  001f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DefWindowProcA@16
  001f6	3b f4		 cmp	 esi, esp
  001f8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fd	89 45 f4	 mov	 DWORD PTR _Result$[ebp], eax
$LN2@Win32MainW:

; 112  : 			//OutputDebugStringA("default\n");
; 113  : 		} break;
; 114  : 	}
; 115  : 	
; 116  : 	return(Result);

  00200	8b 45 f4	 mov	 eax, DWORD PTR _Result$[ebp]

; 117  : }

  00203	52		 push	 edx
  00204	8b cd		 mov	 ecx, ebp
  00206	50		 push	 eax
  00207	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN17@Win32MainW
  0020d	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00212	58		 pop	 eax
  00213	5a		 pop	 edx
  00214	5f		 pop	 edi
  00215	5e		 pop	 esi
  00216	5b		 pop	 ebx
  00217	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0021a	33 cd		 xor	 ecx, ebp
  0021c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00221	81 c4 a0 01 00
	00		 add	 esp, 416		; 000001a0H
  00227	3b ec		 cmp	 ebp, esp
  00229	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0022e	8b e5		 mov	 esp, ebp
  00230	5d		 pop	 ebp
  00231	c2 10 00	 ret	 16			; 00000010H
$LN17@Win32MainW:
  00234	03 00 00 00	 DD	 3
  00238	00 00 00 00	 DD	 $LN16@Win32MainW
$LN16@Win32MainW:
  0023c	dc ff ff ff	 DD	 -36			; ffffffdcH
  00240	10 00 00 00	 DD	 16			; 00000010H
  00244	00 00 00 00	 DD	 $LN13@Win32MainW
  00248	7c ff ff ff	 DD	 -132			; ffffff7cH
  0024c	40 00 00 00	 DD	 64			; 00000040H
  00250	00 00 00 00	 DD	 $LN14@Win32MainW
  00254	28 ff ff ff	 DD	 -216			; ffffff28H
  00258	10 00 00 00	 DD	 16			; 00000010H
  0025c	00 00 00 00	 DD	 $LN15@Win32MainW
$LN15@Win32MainW:
  00260	43		 DB	 67			; 00000043H
  00261	6c		 DB	 108			; 0000006cH
  00262	69		 DB	 105			; 00000069H
  00263	65		 DB	 101			; 00000065H
  00264	6e		 DB	 110			; 0000006eH
  00265	74		 DB	 116			; 00000074H
  00266	52		 DB	 82			; 00000052H
  00267	65		 DB	 101			; 00000065H
  00268	63		 DB	 99			; 00000063H
  00269	74		 DB	 116			; 00000074H
  0026a	00		 DB	 0
$LN14@Win32MainW:
  0026b	50		 DB	 80			; 00000050H
  0026c	61		 DB	 97			; 00000061H
  0026d	69		 DB	 105			; 00000069H
  0026e	6e		 DB	 110			; 0000006eH
  0026f	74		 DB	 116			; 00000074H
  00270	00		 DB	 0
$LN13@Win32MainW:
  00271	43		 DB	 67			; 00000043H
  00272	6c		 DB	 108			; 0000006cH
  00273	69		 DB	 105			; 00000069H
  00274	65		 DB	 101			; 00000065H
  00275	6e		 DB	 110			; 0000006eH
  00276	74		 DB	 116			; 00000074H
  00277	52		 DB	 82			; 00000052H
  00278	65		 DB	 101			; 00000065H
  00279	63		 DB	 99			; 00000063H
  0027a	74		 DB	 116			; 00000074H
  0027b	00		 DB	 0
$LN18@Win32MainW:
  0027c	00 00 00 00	 DD	 $LN5@Win32MainW
  00280	00 00 00 00	 DD	 $LN4@Win32MainW
  00284	00 00 00 00	 DD	 $LN9@Win32MainW
  00288	00 00 00 00	 DD	 $LN6@Win32MainW
  0028c	00 00 00 00	 DD	 $LN7@Win32MainW
  00290	00 00 00 00	 DD	 $LN8@Win32MainW
  00294	00 00 00 00	 DD	 $LN10@Win32MainW
$LN12@Win32MainW:
  00298	00		 DB	 0
  00299	06		 DB	 6
  0029a	06		 DB	 6
  0029b	01		 DB	 1
  0029c	06		 DB	 6
  0029d	06		 DB	 6
  0029e	06		 DB	 6
  0029f	06		 DB	 6
  002a0	06		 DB	 6
  002a1	06		 DB	 6
  002a2	06		 DB	 6
  002a3	06		 DB	 6
  002a4	06		 DB	 6
  002a5	02		 DB	 2
  002a6	03		 DB	 3
  002a7	06		 DB	 6
  002a8	04		 DB	 4
  002a9	06		 DB	 6
  002aa	06		 DB	 6
  002ab	06		 DB	 6
  002ac	06		 DB	 6
  002ad	06		 DB	 6
  002ae	06		 DB	 6
  002af	06		 DB	 6
  002b0	06		 DB	 6
  002b1	06		 DB	 6
  002b2	05		 DB	 5
?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z ENDP	; Win32MainWindowCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mitoskalandiel\documents\visual studio 2015\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32UpdateWindow@@YAXPAUHDC__@@PAUtagRECT@@HHHH@Z
_TEXT	SEGMENT
_WindowHeight$ = -20					; size = 4
_WindowWidth$ = -8					; size = 4
_DeviceContext$ = 8					; size = 4
_WindowRect$ = 12					; size = 4
_X$ = 16						; size = 4
_Y$ = 20						; size = 4
_Width$ = 24						; size = 4
_Height$ = 28						; size = 4
?Win32UpdateWindow@@YAXPAUHDC__@@PAUtagRECT@@HHHH@Z PROC ; Win32UpdateWindow, COMDAT

; 58   : internal void Win32UpdateWindow(HDC DeviceContext, RECT *WindowRect, int X, int Y, int Width, int Height) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 59   : 	int WindowWidth = WindowRect->right - WindowRect->left;

  0001e	8b 45 0c	 mov	 eax, DWORD PTR _WindowRect$[ebp]
  00021	8b 4d 0c	 mov	 ecx, DWORD PTR _WindowRect$[ebp]
  00024	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00027	2b 11		 sub	 edx, DWORD PTR [ecx]
  00029	89 55 f8	 mov	 DWORD PTR _WindowWidth$[ebp], edx

; 60   : 	int WindowHeight = WindowRect->bottom - WindowRect->top;

  0002c	8b 45 0c	 mov	 eax, DWORD PTR _WindowRect$[ebp]
  0002f	8b 4d 0c	 mov	 ecx, DWORD PTR _WindowRect$[ebp]
  00032	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00035	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00038	89 55 ec	 mov	 DWORD PTR _WindowHeight$[ebp], edx

; 61   : 	StretchDIBits(DeviceContext, 0, 0, BitmapWidth, BitmapHeight, 0, 0, WindowHeight, WindowWidth, BitmapMemory, &BitmapInfo, DIB_RGB_COLORS, SRCCOPY);

  0003b	8b f4		 mov	 esi, esp
  0003d	68 20 00 cc 00	 push	 13369376		; 00cc0020H
  00042	6a 00		 push	 0
  00044	68 00 00 00 00	 push	 OFFSET ?BitmapInfo@@3UtagBITMAPINFO@@A
  00049	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapMemory@@3PAXA
  0004e	50		 push	 eax
  0004f	8b 4d f8	 mov	 ecx, DWORD PTR _WindowWidth$[ebp]
  00052	51		 push	 ecx
  00053	8b 55 ec	 mov	 edx, DWORD PTR _WindowHeight$[ebp]
  00056	52		 push	 edx
  00057	6a 00		 push	 0
  00059	6a 00		 push	 0
  0005b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  00060	50		 push	 eax
  00061	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?BitmapWidth@@3HA
  00067	51		 push	 ecx
  00068	6a 00		 push	 0
  0006a	6a 00		 push	 0
  0006c	8b 55 08	 mov	 edx, DWORD PTR _DeviceContext$[ebp]
  0006f	52		 push	 edx
  00070	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StretchDIBits@52
  00076	3b f4		 cmp	 esi, esp
  00078	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 62   : }

  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5b		 pop	 ebx
  00080	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00086	3b ec		 cmp	 ebp, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
?Win32UpdateWindow@@YAXPAUHDC__@@PAUtagRECT@@HHHH@Z ENDP ; Win32UpdateWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mitoskalandiel\documents\visual studio 2015\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT ?Win32ResizeDIBSection@@YAXHH@Z
_TEXT	SEGMENT
_X$1 = -80						; size = 4
_Pixel$2 = -68						; size = 4
_Y$3 = -56						; size = 4
_Row$ = -44						; size = 4
_BitmapMemorySize$ = -32				; size = 4
_Pitch$ = -20						; size = 4
_BytesPerPixel$ = -8					; size = 4
_Width$ = 8						; size = 4
_Height$ = 12						; size = 4
?Win32ResizeDIBSection@@YAXHH@Z PROC			; Win32ResizeDIBSection, COMDAT

; 23   : internal void Win32ResizeDIBSection(int Width, int Height) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd ec fe ff
	ff		 lea	 edi, DWORD PTR [ebp-276]
  00012	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 24   : 	if (BitmapMemory) {

  0001e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?BitmapMemory@@3PAXA, 0
  00025	74 1c		 je	 SHORT $LN8@Win32Resiz

; 25   : 		VirtualFree(BitmapMemory,0,MEM_RELEASE);

  00027	8b f4		 mov	 esi, esp
  00029	68 00 80 00 00	 push	 32768			; 00008000H
  0002e	6a 00		 push	 0
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapMemory@@3PAXA
  00035	50		 push	 eax
  00036	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualFree@12
  0003c	3b f4		 cmp	 esi, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN8@Win32Resiz:

; 26   : 	}
; 27   : 	BitmapWidth = Width;

  00043	8b 45 08	 mov	 eax, DWORD PTR _Width$[ebp]
  00046	a3 00 00 00 00	 mov	 DWORD PTR ?BitmapWidth@@3HA, eax

; 28   : 	BitmapHeight = Height;

  0004b	8b 45 0c	 mov	 eax, DWORD PTR _Height$[ebp]
  0004e	a3 00 00 00 00	 mov	 DWORD PTR ?BitmapHeight@@3HA, eax

; 29   : 	BitmapInfo.bmiHeader.biSize = sizeof(BitmapInfo.bmiHeader);

  00053	c7 05 00 00 00
	00 28 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A, 40 ; 00000028H

; 30   : 	BitmapInfo.bmiHeader.biWidth = BitmapWidth;

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  00062	a3 04 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+4, eax

; 31   : 	BitmapInfo.bmiHeader.biHeight = BitmapHeight;

  00067	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapHeight@@3HA
  0006c	a3 08 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+8, eax

; 32   : 	BitmapInfo.bmiHeader.biPlanes = 1;

  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	66 a3 0c 00 00
	00		 mov	 WORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+12, ax

; 33   : 	BitmapInfo.bmiHeader.biBitCount = 32;

  0007c	b8 20 00 00 00	 mov	 eax, 32			; 00000020H
  00081	66 a3 0e 00 00
	00		 mov	 WORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+14, ax

; 34   : 	BitmapInfo.bmiHeader.biCompression = BI_RGB;

  00087	c7 05 10 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?BitmapInfo@@3UtagBITMAPINFO@@A+16, 0

; 35   : 
; 36   : 	int BytesPerPixel = 4;

  00091	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR _BytesPerPixel$[ebp], 4

; 37   : 	int Pitch = Width*BytesPerPixel;

  00098	8b 45 08	 mov	 eax, DWORD PTR _Width$[ebp]
  0009b	0f af 45 f8	 imul	 eax, DWORD PTR _BytesPerPixel$[ebp]
  0009f	89 45 ec	 mov	 DWORD PTR _Pitch$[ebp], eax

; 38   : 	int BitmapMemorySize = (BitmapWidth*BitmapHeight)*BytesPerPixel;

  000a2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapWidth@@3HA
  000a7	0f af 05 00 00
	00 00		 imul	 eax, DWORD PTR ?BitmapHeight@@3HA
  000ae	0f af 45 f8	 imul	 eax, DWORD PTR _BytesPerPixel$[ebp]
  000b2	89 45 e0	 mov	 DWORD PTR _BitmapMemorySize$[ebp], eax

; 39   : 	BitmapMemory = VirtualAlloc(0, BitmapMemorySize, MEM_COMMIT, PAGE_READWRITE);

  000b5	8b f4		 mov	 esi, esp
  000b7	6a 04		 push	 4
  000b9	68 00 10 00 00	 push	 4096			; 00001000H
  000be	8b 45 e0	 mov	 eax, DWORD PTR _BitmapMemorySize$[ebp]
  000c1	50		 push	 eax
  000c2	6a 00		 push	 0
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__VirtualAlloc@16
  000ca	3b f4		 cmp	 esi, esp
  000cc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d1	a3 00 00 00 00	 mov	 DWORD PTR ?BitmapMemory@@3PAXA, eax

; 40   : 
; 41   : 	uint8 *Row = (uint8 *)BitmapMemory;

  000d6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?BitmapMemory@@3PAXA
  000db	89 45 d4	 mov	 DWORD PTR _Row$[ebp], eax

; 42   : 	for (int Y = 0; Y < BitmapHeight; ++Y) {

  000de	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _Y$3[ebp], 0
  000e5	eb 09		 jmp	 SHORT $LN4@Win32Resiz
$LN2@Win32Resiz:
  000e7	8b 45 c8	 mov	 eax, DWORD PTR _Y$3[ebp]
  000ea	83 c0 01	 add	 eax, 1
  000ed	89 45 c8	 mov	 DWORD PTR _Y$3[ebp], eax
$LN4@Win32Resiz:
  000f0	8b 45 c8	 mov	 eax, DWORD PTR _Y$3[ebp]
  000f3	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?BitmapHeight@@3HA
  000f9	7d 6c		 jge	 SHORT $LN1@Win32Resiz

; 43   : 		uint8 *Pixel = (uint8 *)Row;

  000fb	8b 45 d4	 mov	 eax, DWORD PTR _Row$[ebp]
  000fe	89 45 bc	 mov	 DWORD PTR _Pixel$2[ebp], eax

; 44   : 		for (int X = 0; X < BitmapWidth; ++X) {

  00101	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _X$1[ebp], 0
  00108	eb 09		 jmp	 SHORT $LN7@Win32Resiz
$LN5@Win32Resiz:
  0010a	8b 45 b0	 mov	 eax, DWORD PTR _X$1[ebp]
  0010d	83 c0 01	 add	 eax, 1
  00110	89 45 b0	 mov	 DWORD PTR _X$1[ebp], eax
$LN7@Win32Resiz:
  00113	8b 45 b0	 mov	 eax, DWORD PTR _X$1[ebp]
  00116	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?BitmapWidth@@3HA
  0011c	7d 3e		 jge	 SHORT $LN6@Win32Resiz

; 45   : 			*Pixel = 255;

  0011e	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  00121	c6 00 ff	 mov	 BYTE PTR [eax], 255	; 000000ffH

; 46   : 			++Pixel;

  00124	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  00127	83 c0 01	 add	 eax, 1
  0012a	89 45 bc	 mov	 DWORD PTR _Pixel$2[ebp], eax

; 47   : 			*Pixel = 0;

  0012d	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  00130	c6 00 00	 mov	 BYTE PTR [eax], 0

; 48   : 			++Pixel;

  00133	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  00136	83 c0 01	 add	 eax, 1
  00139	89 45 bc	 mov	 DWORD PTR _Pixel$2[ebp], eax

; 49   : 			*Pixel = 0;

  0013c	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  0013f	c6 00 00	 mov	 BYTE PTR [eax], 0

; 50   : 			++Pixel;

  00142	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  00145	83 c0 01	 add	 eax, 1
  00148	89 45 bc	 mov	 DWORD PTR _Pixel$2[ebp], eax

; 51   : 			*Pixel = 0;

  0014b	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  0014e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 52   : 			++Pixel;

  00151	8b 45 bc	 mov	 eax, DWORD PTR _Pixel$2[ebp]
  00154	83 c0 01	 add	 eax, 1
  00157	89 45 bc	 mov	 DWORD PTR _Pixel$2[ebp], eax

; 53   : 		}

  0015a	eb ae		 jmp	 SHORT $LN5@Win32Resiz
$LN6@Win32Resiz:

; 54   : 		Row += Pitch;

  0015c	8b 45 d4	 mov	 eax, DWORD PTR _Row$[ebp]
  0015f	03 45 ec	 add	 eax, DWORD PTR _Pitch$[ebp]
  00162	89 45 d4	 mov	 DWORD PTR _Row$[ebp], eax

; 55   : 	}

  00165	eb 80		 jmp	 SHORT $LN2@Win32Resiz
$LN1@Win32Resiz:

; 56   : }

  00167	5f		 pop	 edi
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  00170	3b ec		 cmp	 ebp, esp
  00172	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00177	8b e5		 mov	 esp, ebp
  00179	5d		 pop	 ebp
  0017a	c3		 ret	 0
?Win32ResizeDIBSection@@YAXHH@Z ENDP			; Win32ResizeDIBSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\users\mitoskalandiel\documents\visual studio 2015\projects\hmh\win32_handmade\win32_handmade.cpp
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_MessageResult$1 = -108					; size = 4
_Message$2 = -96					; size = 28
_WindowHandle$3 = -60					; size = 4
_WindowClass$ = -48					; size = 40
__$ArrayPad$ = -4					; size = 4
_Instance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_CommandLine$ = 16					; size = 4
_ShowCode$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 119  : int CALLBACK WinMain(HINSTANCE Instance, HINSTANCE hPrevInstance, LPSTR CommandLine, int ShowCode) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 120  : 	WNDCLASS WindowClass = {};

  00028	33 c0		 xor	 eax, eax
  0002a	89 45 d0	 mov	 DWORD PTR _WindowClass$[ebp], eax
  0002d	89 45 d4	 mov	 DWORD PTR _WindowClass$[ebp+4], eax
  00030	89 45 d8	 mov	 DWORD PTR _WindowClass$[ebp+8], eax
  00033	89 45 dc	 mov	 DWORD PTR _WindowClass$[ebp+12], eax
  00036	89 45 e0	 mov	 DWORD PTR _WindowClass$[ebp+16], eax
  00039	89 45 e4	 mov	 DWORD PTR _WindowClass$[ebp+20], eax
  0003c	89 45 e8	 mov	 DWORD PTR _WindowClass$[ebp+24], eax
  0003f	89 45 ec	 mov	 DWORD PTR _WindowClass$[ebp+28], eax
  00042	89 45 f0	 mov	 DWORD PTR _WindowClass$[ebp+32], eax
  00045	89 45 f4	 mov	 DWORD PTR _WindowClass$[ebp+36], eax

; 121  : 	WindowClass.style = CS_HREDRAW|CS_VREDRAW|CS_OWNDC;

  00048	c7 45 d0 23 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp], 35 ; 00000023H

; 122  : 	WindowClass.lpfnWndProc = Win32MainWindowCallback;

  0004f	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp+4], OFFSET ?Win32MainWindowCallback@@YGJPAUHWND__@@IIJ@Z ; Win32MainWindowCallback

; 123  : 	WindowClass.hInstance = Instance;

  00056	8b 45 08	 mov	 eax, DWORD PTR _Instance$[ebp]
  00059	89 45 e0	 mov	 DWORD PTR _WindowClass$[ebp+16], eax

; 124  : 	//WindowClass.hIcon = ;
; 125  : 	//WindowClass.hCursor = ;
; 126  : 	WindowClass.lpszClassName = "hmhWindowClass";

  0005c	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _WindowClass$[ebp+36], OFFSET ??_C@_0P@EDKCKOAO@hmhWindowClass?$AA@

; 127  : 	if (RegisterClass(&WindowClass))

  00063	8b f4		 mov	 esi, esp
  00065	8d 45 d0	 lea	 eax, DWORD PTR _WindowClass$[ebp]
  00068	50		 push	 eax
  00069	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassA@4
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00076	0f b7 c8	 movzx	 ecx, ax
  00079	85 c9		 test	 ecx, ecx
  0007b	0f 84 a6 00 00
	00		 je	 $LN5@WinMain

; 128  : 	{
; 129  : 		HWND WindowHandle = CreateWindowEx(

  00081	8b f4		 mov	 esi, esp
  00083	6a 00		 push	 0
  00085	8b 45 08	 mov	 eax, DWORD PTR _Instance$[ebp]
  00088	50		 push	 eax
  00089	6a 00		 push	 0
  0008b	6a 00		 push	 0
  0008d	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00092	68 00 00 00 80	 push	 -2147483648		; 80000000H
  00097	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0009c	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000a1	68 00 00 cf 10	 push	 282001408		; 10cf0000H
  000a6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
  000ab	8b 4d f4	 mov	 ecx, DWORD PTR _WindowClass$[ebp+36]
  000ae	51		 push	 ecx
  000af	6a 00		 push	 0
  000b1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  000b7	3b f4		 cmp	 esi, esp
  000b9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000be	89 45 c4	 mov	 DWORD PTR _WindowHandle$3[ebp], eax

; 130  : 			0,
; 131  : 			WindowClass.lpszClassName,
; 132  : 			"Handmade Hero v0.1",
; 133  : 			WS_OVERLAPPEDWINDOW|WS_VISIBLE,
; 134  : 			CW_USEDEFAULT,
; 135  : 			CW_USEDEFAULT,
; 136  : 			CW_USEDEFAULT,
; 137  : 			CW_USEDEFAULT,
; 138  : 			0,
; 139  : 			0,
; 140  : 			Instance,
; 141  : 			0);
; 142  : 		if (WindowHandle)

  000c1	83 7d c4 00	 cmp	 DWORD PTR _WindowHandle$3[ebp], 0
  000c5	74 60		 je	 SHORT $LN5@WinMain

; 143  : 		{
; 144  : 			Running = true;

  000c7	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?Running@@3_NA, 1
$LN2@WinMain:

; 145  : 			while(Running)

  000ce	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?Running@@3_NA
  000d5	85 c0		 test	 eax, eax
  000d7	74 4e		 je	 SHORT $LN5@WinMain

; 146  : 			{
; 147  : 				MSG Message;
; 148  : 				BOOL MessageResult = GetMessage(&Message, 0, 0, 0);

  000d9	8b f4		 mov	 esi, esp
  000db	6a 00		 push	 0
  000dd	6a 00		 push	 0
  000df	6a 00		 push	 0
  000e1	8d 45 a0	 lea	 eax, DWORD PTR _Message$2[ebp]
  000e4	50		 push	 eax
  000e5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetMessageA@16
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f2	89 45 94	 mov	 DWORD PTR _MessageResult$1[ebp], eax

; 149  : 				if (MessageResult > 0) {

  000f5	83 7d 94 00	 cmp	 DWORD PTR _MessageResult$1[ebp], 0
  000f9	7e 28		 jle	 SHORT $LN8@WinMain

; 150  : 					TranslateMessage(&Message);

  000fb	8b f4		 mov	 esi, esp
  000fd	8d 45 a0	 lea	 eax, DWORD PTR _Message$2[ebp]
  00100	50		 push	 eax
  00101	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TranslateMessage@4
  00107	3b f4		 cmp	 esi, esp
  00109	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 151  : 					DispatchMessage(&Message);

  0010e	8b f4		 mov	 esi, esp
  00110	8d 45 a0	 lea	 eax, DWORD PTR _Message$2[ebp]
  00113	50		 push	 eax
  00114	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DispatchMessageA@4
  0011a	3b f4		 cmp	 esi, esp
  0011c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 152  : 				}
; 153  : 				else {

  00121	eb 02		 jmp	 SHORT $LN9@WinMain
$LN8@WinMain:

; 154  : 					break;

  00123	eb 02		 jmp	 SHORT $LN5@WinMain
$LN9@WinMain:

; 155  : 				}
; 156  : 			}

  00125	eb a7		 jmp	 SHORT $LN2@WinMain
$LN5@WinMain:

; 157  : 			
; 158  : 		}
; 159  : 		else
; 160  : 		{
; 161  : 			//TODO(smzb): Log this event
; 162  : 		}
; 163  : 	}
; 164  : 	else {
; 165  : 		//TODO(smzb): log this event
; 166  : 	}
; 167  : 	MessageBox(0, "This is Handmade Hero", "Handmade Hero v0.1", MB_OK | MB_ICONINFORMATION);

  00127	8b f4		 mov	 esi, esp
  00129	6a 40		 push	 64			; 00000040H
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMDKAHFN@Handmade?5Hero?5v0?41?$AA@
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KHEJAAGL@This?5is?5Handmade?5Hero?$AA@
  00135	6a 00		 push	 0
  00137	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
  0013d	3b f4		 cmp	 esi, esp
  0013f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 168  : 	return 0;

  00144	33 c0		 xor	 eax, eax

; 169  : }

  00146	52		 push	 edx
  00147	8b cd		 mov	 ecx, ebp
  00149	50		 push	 eax
  0014a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN14@WinMain
  00150	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00155	58		 pop	 eax
  00156	5a		 pop	 edx
  00157	5f		 pop	 edi
  00158	5e		 pop	 esi
  00159	5b		 pop	 ebx
  0015a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0015d	33 cd		 xor	 ecx, ebp
  0015f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00164	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  0016a	3b ec		 cmp	 ebp, esp
  0016c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00171	8b e5		 mov	 esp, ebp
  00173	5d		 pop	 ebp
  00174	c2 10 00	 ret	 16			; 00000010H
  00177	90		 npad	 1
$LN14@WinMain:
  00178	02 00 00 00	 DD	 2
  0017c	00 00 00 00	 DD	 $LN13@WinMain
$LN13@WinMain:
  00180	d0 ff ff ff	 DD	 -48			; ffffffd0H
  00184	28 00 00 00	 DD	 40			; 00000028H
  00188	00 00 00 00	 DD	 $LN11@WinMain
  0018c	a0 ff ff ff	 DD	 -96			; ffffffa0H
  00190	1c 00 00 00	 DD	 28			; 0000001cH
  00194	00 00 00 00	 DD	 $LN12@WinMain
$LN12@WinMain:
  00198	4d		 DB	 77			; 0000004dH
  00199	65		 DB	 101			; 00000065H
  0019a	73		 DB	 115			; 00000073H
  0019b	73		 DB	 115			; 00000073H
  0019c	61		 DB	 97			; 00000061H
  0019d	67		 DB	 103			; 00000067H
  0019e	65		 DB	 101			; 00000065H
  0019f	00		 DB	 0
$LN11@WinMain:
  001a0	57		 DB	 87			; 00000057H
  001a1	69		 DB	 105			; 00000069H
  001a2	6e		 DB	 110			; 0000006eH
  001a3	64		 DB	 100			; 00000064H
  001a4	6f		 DB	 111			; 0000006fH
  001a5	77		 DB	 119			; 00000077H
  001a6	43		 DB	 67			; 00000043H
  001a7	6c		 DB	 108			; 0000006cH
  001a8	61		 DB	 97			; 00000061H
  001a9	73		 DB	 115			; 00000073H
  001aa	73		 DB	 115			; 00000073H
  001ab	00		 DB	 0
_WinMain@16 ENDP
_TEXT	ENDS
END
